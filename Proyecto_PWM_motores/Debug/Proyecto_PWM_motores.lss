
Proyecto_PWM_motores.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000087e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000082a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000087e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aad  00000000  00000000  00000978  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000737  00000000  00000000  00001425  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cc  00000000  00000000  00001b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00002028  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046a  00000000  00000000  0000211c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000466  00000000  00000000  00002586  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  000029ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <main>
  78:	0c 94 13 04 	jmp	0x826	; 0x826 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <setup>:
	OCR1A = velocidad;
	OCR1B = velocidad;
}

void PWM_setVel2(uint16_t vel2) {
	OCR1B = vel2;
  80:	f8 94       	cli
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 b9       	out	0x04, r24	; 4
  86:	8c ef       	ldi	r24, 0xFC	; 252
  88:	87 b9       	out	0x07, r24	; 7
  8a:	8a b1       	in	r24, 0x0a	; 10
  8c:	80 63       	ori	r24, 0x30	; 48
  8e:	8a b9       	out	0x0a, r24	; 10
  90:	78 94       	sei
  92:	08 95       	ret

00000094 <initADC>:
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
  9a:	87 e8       	ldi	r24, 0x87	; 135
  9c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  a0:	08 95       	ret

000000a2 <leerADC>:
  a2:	ec e7       	ldi	r30, 0x7C	; 124
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	90 81       	ld	r25, Z
  a8:	90 7f       	andi	r25, 0xF0	; 240
  aa:	8f 70       	andi	r24, 0x0F	; 15
  ac:	89 2b       	or	r24, r25
  ae:	80 83       	st	Z, r24
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 64       	ori	r24, 0x40	; 64
  b8:	80 83       	st	Z, r24
  ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  be:	86 fd       	sbrc	r24, 6
  c0:	fc cf       	rjmp	.-8      	; 0xba <leerADC+0x18>
  c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  c6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  ca:	08 95       	ret

000000cc <PWM_motor1>:
  cc:	82 ea       	ldi	r24, 0xA2	; 162
  ce:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  d2:	8d e1       	ldi	r24, 0x1D	; 29
  d4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
  e0:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	86 60       	ori	r24, 0x06	; 6
  e8:	84 b9       	out	0x04, r24	; 4
  ea:	08 95       	ret

000000ec <PWM_motor3>:
  ec:	81 ea       	ldi	r24, 0xA1	; 161
  ee:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
  f2:	87 e0       	ldi	r24, 0x07	; 7
  f4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
  f8:	8a b1       	in	r24, 0x0a	; 10
  fa:	88 60       	ori	r24, 0x08	; 8
  fc:	8a b9       	out	0x0a, r24	; 10
  fe:	84 b1       	in	r24, 0x04	; 4
 100:	88 60       	ori	r24, 0x08	; 8
 102:	84 b9       	out	0x04, r24	; 4
 104:	08 95       	ret

00000106 <PWM_setVel>:
 106:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 10a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 10e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 112:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 116:	08 95       	ret

00000118 <PWM_setVel3>:
}

void PWM_setVel3(uint16_t vel3) {
	OCR2B = vel3;
 118:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 11c:	08 95       	ret

0000011e <PWM_setVel4>:
}
void PWM_setVel4(uint16_t vel4) {
	OCR2A = vel4;
 11e:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 122:	08 95       	ret

00000124 <control_motor>:
}

void control_motor(uint16_t X, uint16_t Y){
	
	if (Y >= 0 && Y < 480){
 124:	60 3e       	cpi	r22, 0xE0	; 224
 126:	21 e0       	ldi	r18, 0x01	; 1
 128:	72 07       	cpc	r23, r18
 12a:	50 f4       	brcc	.+20     	; 0x140 <control_motor+0x1c>
		
		//AVANZAR PARA ENFRENTE
		PORTB |= (1 << PORTB5);
 12c:	85 b1       	in	r24, 0x05	; 5
 12e:	80 62       	ori	r24, 0x20	; 32
 130:	85 b9       	out	0x05, r24	; 5
		PORTC |= (1 << PORTC3);    // Enciende PORTC3
 132:	88 b1       	in	r24, 0x08	; 8
 134:	88 60       	ori	r24, 0x08	; 8
 136:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~((1 << PORTC2) | (1 << PORTC4));  // Apaga PORTC2 y PORTC4
 138:	88 b1       	in	r24, 0x08	; 8
 13a:	8b 7e       	andi	r24, 0xEB	; 235
 13c:	88 b9       	out	0x08, r24	; 8
 13e:	08 95       	ret
		
		} else if( Y > 520 && Y < 1023){
 140:	69 50       	subi	r22, 0x09	; 9
 142:	72 40       	sbci	r23, 0x02	; 2
 144:	66 3f       	cpi	r22, 0xF6	; 246
 146:	71 40       	sbci	r23, 0x01	; 1
 148:	50 f4       	brcc	.+20     	; 0x15e <control_motor+0x3a>
		
		//PARA ATRAS
		PORTB &= ~(1 << PORTB5);
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	8f 7d       	andi	r24, 0xDF	; 223
 14e:	85 b9       	out	0x05, r24	; 5

		PORTC |= (1 << PORTC2) | (1 << PORTC4);  // Encender PORTC2 y PORTC4
 150:	88 b1       	in	r24, 0x08	; 8
 152:	84 61       	ori	r24, 0x14	; 20
 154:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC3);                  // Apagar PORTC3
 156:	88 b1       	in	r24, 0x08	; 8
 158:	87 7f       	andi	r24, 0xF7	; 247
 15a:	88 b9       	out	0x08, r24	; 8
 15c:	08 95       	ret
		
	
		}else {
			
		if(X >= 0 && X < 480){
 15e:	80 3e       	cpi	r24, 0xE0	; 224
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	92 07       	cpc	r25, r18
 164:	50 f4       	brcc	.+20     	; 0x17a <control_motor+0x56>
			//AVANZAR PARA la izquierda
			PORTB |= (1 << PORTB5);
 166:	85 b1       	in	r24, 0x05	; 5
 168:	80 62       	ori	r24, 0x20	; 32
 16a:	85 b9       	out	0x05, r24	; 5
			PORTC &= ~((1 << PORTC2) | (1 << PORTC3));  // Apagar PORTC2 y PORTC3
 16c:	88 b1       	in	r24, 0x08	; 8
 16e:	83 7f       	andi	r24, 0xF3	; 243
 170:	88 b9       	out	0x08, r24	; 8
			PORTC |= (1 << PORTC4);                     // Encender PORTC4
 172:	88 b1       	in	r24, 0x08	; 8
 174:	80 61       	ori	r24, 0x10	; 16
 176:	88 b9       	out	0x08, r24	; 8
 178:	08 95       	ret
			
			
		}else if( X > 520 && X < 1023){
 17a:	89 50       	subi	r24, 0x09	; 9
 17c:	92 40       	sbci	r25, 0x02	; 2
 17e:	86 3f       	cpi	r24, 0xF6	; 246
 180:	91 40       	sbci	r25, 0x01	; 1
 182:	50 f4       	brcc	.+20     	; 0x198 <control_motor+0x74>
			
			//AVANZAR PARA la derecha
			PORTB &= ~(1 << PORTB5);
 184:	85 b1       	in	r24, 0x05	; 5
 186:	8f 7d       	andi	r24, 0xDF	; 223
 188:	85 b9       	out	0x05, r24	; 5
			PORTC |= (1 << PORTC2) | (1 << PORTC3);  // Encender bits 2 y 3
 18a:	88 b1       	in	r24, 0x08	; 8
 18c:	8c 60       	ori	r24, 0x0C	; 12
 18e:	88 b9       	out	0x08, r24	; 8
			PORTC &= ~(1 << PORTC4);                   // Apagar bit 4
 190:	88 b1       	in	r24, 0x08	; 8
 192:	8f 7e       	andi	r24, 0xEF	; 239
 194:	88 b9       	out	0x08, r24	; 8
 196:	08 95       	ret
			
		}else {	
			
		//motor sin moverse
		PORTB &= ~(1 << PORTB5);
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	8f 7d       	andi	r24, 0xDF	; 223
 19c:	85 b9       	out	0x05, r24	; 5
		PORTC &= ~(1 << PORTC2); // aPAGAR LED
 19e:	88 b1       	in	r24, 0x08	; 8
 1a0:	8b 7f       	andi	r24, 0xFB	; 251
 1a2:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC3); // aPAGAR LED
 1a4:	88 b1       	in	r24, 0x08	; 8
 1a6:	87 7f       	andi	r24, 0xF7	; 247
 1a8:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1 << PORTC4); // aPAGAR LED
 1aa:	88 b1       	in	r24, 0x08	; 8
 1ac:	8f 7e       	andi	r24, 0xEF	; 239
 1ae:	88 b9       	out	0x08, r24	; 8
 1b0:	08 95       	ret

000001b2 <Joystick_X>:

void Joystick_X(uint16_t lectura){
	uint16_t X = lectura; 
	
	//IR A LA IZQUIERDA
	if (X >= 0 && X < 480) {
 1b2:	80 3e       	cpi	r24, 0xE0	; 224
 1b4:	21 e0       	ldi	r18, 0x01	; 1
 1b6:	92 07       	cpc	r25, r18
 1b8:	28 f5       	brcc	.+74     	; 0x204 <Joystick_X+0x52>
	PORTB |= (1 << PORTB5);
	PORTC &= ~((1 << PORTC2) | (1 << PORTC3));  // Apagar PORTC2 y PORTC3
	PORTC |= (1 << PORTC4);                     // Encender PORTC4
*/	
	// Le mandamos el valor del mapeo
		uint8_t valor = (uint8_t)(lectura * -255.0 / 480.0)+255.0;  // Convertir a 8 bits
 1ba:	bc 01       	movw	r22, r24
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 18 03 	call	0x630	; 0x630 <__floatunsisf>
 1c4:	20 e0       	ldi	r18, 0x00	; 0
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	4f e7       	ldi	r20, 0x7F	; 127
 1ca:	53 ec       	ldi	r21, 0xC3	; 195
 1cc:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulsf3>
 1d0:	20 e0       	ldi	r18, 0x00	; 0
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 ef       	ldi	r20, 0xF0	; 240
 1d6:	53 e4       	ldi	r21, 0x43	; 67
 1d8:	0e 94 77 02 	call	0x4ee	; 0x4ee <__divsf3>
 1dc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 1a 03 	call	0x634	; 0x634 <__floatsisf>
 1ea:	20 e0       	ldi	r18, 0x00	; 0
 1ec:	30 e0       	ldi	r19, 0x00	; 0
 1ee:	4f e7       	ldi	r20, 0x7F	; 127
 1f0:	53 e4       	ldi	r21, 0x43	; 67
 1f2:	0e 94 0b 02 	call	0x416	; 0x416 <__addsf3>
 1f6:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
		PWM_setVel(valor);
 1fa:	86 2f       	mov	r24, r22
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 83 00 	call	0x106	; 0x106 <PWM_setVel>
 202:	08 95       	ret
		//PORTC = (1 << PORTC3); // Encender LED
		//PORTC = (0 << PORTC4); // aPAGAR LED
		
		//PWM_setVel2(valor);
	} else if ( X > 520 && X < 1023) {
 204:	9c 01       	movw	r18, r24
 206:	29 50       	subi	r18, 0x09	; 9
 208:	32 40       	sbci	r19, 0x02	; 2
 20a:	26 3f       	cpi	r18, 0xF6	; 246
 20c:	31 40       	sbci	r19, 0x01	; 1
 20e:	e8 f4       	brcc	.+58     	; 0x24a <Joystick_X+0x98>
	//AVANZAR PARA la derecha
	PORTB &= ~(1 << PORTB5);
	PORTC |= (1 << PORTC2) | (1 << PORTC3);  // Encender bits 2 y 3
	PORTC &= ~(1 << PORTC4);                   // Apagar bit 4
*/	
	uint8_t valor = (lectura * 255.0 / 503.0) -263.62;  // Convertir a 8 bits
 210:	bc 01       	movw	r22, r24
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 18 03 	call	0x630	; 0x630 <__floatunsisf>
 21a:	20 e0       	ldi	r18, 0x00	; 0
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	4f e7       	ldi	r20, 0x7F	; 127
 220:	53 e4       	ldi	r21, 0x43	; 67
 222:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulsf3>
 226:	20 e0       	ldi	r18, 0x00	; 0
 228:	30 e8       	ldi	r19, 0x80	; 128
 22a:	4b ef       	ldi	r20, 0xFB	; 251
 22c:	53 e4       	ldi	r21, 0x43	; 67
 22e:	0e 94 77 02 	call	0x4ee	; 0x4ee <__divsf3>
 232:	2c e5       	ldi	r18, 0x5C	; 92
 234:	3f ec       	ldi	r19, 0xCF	; 207
 236:	43 e8       	ldi	r20, 0x83	; 131
 238:	53 e4       	ldi	r21, 0x43	; 67
 23a:	0e 94 0a 02 	call	0x414	; 0x414 <__subsf3>
 23e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
	PWM_setVel(valor);
 242:	86 2f       	mov	r24, r22
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 83 00 	call	0x106	; 0x106 <PWM_setVel>
 24a:	08 95       	ret

0000024c <Joystick_Y>:
	
	
}	
void Joystick_Y(uint16_t readADC2){
	uint16_t Y = readADC2; 
	if (Y >= 0 && Y < 480){
 24c:	80 3e       	cpi	r24, 0xE0	; 224
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	92 07       	cpc	r25, r18
 252:	28 f5       	brcc	.+74     	; 0x29e <Joystick_Y+0x52>
		PORTB |= (1 << PORTB5);  
		PORTC |= (1 << PORTC3);    // Enciende PORTC3 
		PORTC &= ~((1 << PORTC2) | (1 << PORTC4));  // Apaga PORTC2 y PORTC4
*/		
// MANDAMOS El mapeo para joystick enfrente
		uint8_t vel2 = (uint8_t)(readADC2 * -255.0 / 480.0)+255.0;  // Convertir a 8 bits
 254:	bc 01       	movw	r22, r24
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0e 94 18 03 	call	0x630	; 0x630 <__floatunsisf>
 25e:	20 e0       	ldi	r18, 0x00	; 0
 260:	30 e0       	ldi	r19, 0x00	; 0
 262:	4f e7       	ldi	r20, 0x7F	; 127
 264:	53 ec       	ldi	r21, 0xC3	; 195
 266:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulsf3>
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 ef       	ldi	r20, 0xF0	; 240
 270:	53 e4       	ldi	r21, 0x43	; 67
 272:	0e 94 77 02 	call	0x4ee	; 0x4ee <__divsf3>
 276:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	0e 94 1a 03 	call	0x634	; 0x634 <__floatsisf>
 284:	20 e0       	ldi	r18, 0x00	; 0
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	4f e7       	ldi	r20, 0x7F	; 127
 28a:	53 e4       	ldi	r21, 0x43	; 67
 28c:	0e 94 0b 02 	call	0x416	; 0x416 <__addsf3>
 290:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
		PWM_setVel(vel2);
 294:	86 2f       	mov	r24, r22
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 83 00 	call	0x106	; 0x106 <PWM_setVel>
 29c:	08 95       	ret
		//PWM_setVel2(vel2);
	} else if( Y > 520 && Y < 1023){
 29e:	9c 01       	movw	r18, r24
 2a0:	29 50       	subi	r18, 0x09	; 9
 2a2:	32 40       	sbci	r19, 0x02	; 2
 2a4:	26 3f       	cpi	r18, 0xF6	; 246
 2a6:	31 40       	sbci	r19, 0x01	; 1
 2a8:	e8 f4       	brcc	.+58     	; 0x2e4 <Joystick_Y+0x98>

		PORTC |= (1 << PORTC2) | (1 << PORTC4);  // Encender PORTC2 y PORTC4
		PORTC &= ~(1 << PORTC3);                  // Apagar PORTC3
	*/	
//Mandamos el mapeo de joystick abajo		
		uint8_t vel2 = (readADC2 * 255.0 / 503.0) -263.62;  // Convertir a 8 bits
 2aa:	bc 01       	movw	r22, r24
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	0e 94 18 03 	call	0x630	; 0x630 <__floatunsisf>
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	4f e7       	ldi	r20, 0x7F	; 127
 2ba:	53 e4       	ldi	r21, 0x43	; 67
 2bc:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulsf3>
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	30 e8       	ldi	r19, 0x80	; 128
 2c4:	4b ef       	ldi	r20, 0xFB	; 251
 2c6:	53 e4       	ldi	r21, 0x43	; 67
 2c8:	0e 94 77 02 	call	0x4ee	; 0x4ee <__divsf3>
 2cc:	2c e5       	ldi	r18, 0x5C	; 92
 2ce:	3f ec       	ldi	r19, 0xCF	; 207
 2d0:	43 e8       	ldi	r20, 0x83	; 131
 2d2:	53 e4       	ldi	r21, 0x43	; 67
 2d4:	0e 94 0a 02 	call	0x414	; 0x414 <__subsf3>
 2d8:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
		PWM_setVel(vel2);
 2dc:	86 2f       	mov	r24, r22
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 83 00 	call	0x106	; 0x106 <PWM_setVel>
 2e4:	08 95       	ret

000002e6 <rotacion>:
	
}

void rotacion(uint16_t readADC4){
	uint16_t potenciometro = readADC4;
	if (potenciometro >= 0 && potenciometro < 480){
 2e6:	80 3e       	cpi	r24, 0xE0	; 224
 2e8:	21 e0       	ldi	r18, 0x01	; 1
 2ea:	92 07       	cpc	r25, r18
 2ec:	58 f5       	brcc	.+86     	; 0x344 <rotacion+0x5e>
		
		//AVANZAR PARA ENFRENTE
		
		PORTD |= (1 << PORTD5);    // Enciende PORTD5 
 2ee:	2b b1       	in	r18, 0x0b	; 11
 2f0:	20 62       	ori	r18, 0x20	; 32
 2f2:	2b b9       	out	0x0b, r18	; 11
		PORTD &= ~(1 << PORTD4);   // Apaga PORTD4 
 2f4:	2b b1       	in	r18, 0x0b	; 11
 2f6:	2f 7e       	andi	r18, 0xEF	; 239
 2f8:	2b b9       	out	0x0b, r18	; 11
		
	
		// MANDAMOS El mapeo para joystick enfrente
		uint8_t mov = (uint8_t)(readADC4 * -255.0 / 480.0)+255.0;  // Convertir a 8 bits
 2fa:	bc 01       	movw	r22, r24
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 18 03 	call	0x630	; 0x630 <__floatunsisf>
 304:	20 e0       	ldi	r18, 0x00	; 0
 306:	30 e0       	ldi	r19, 0x00	; 0
 308:	4f e7       	ldi	r20, 0x7F	; 127
 30a:	53 ec       	ldi	r21, 0xC3	; 195
 30c:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulsf3>
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	30 e0       	ldi	r19, 0x00	; 0
 314:	40 ef       	ldi	r20, 0xF0	; 240
 316:	53 e4       	ldi	r21, 0x43	; 67
 318:	0e 94 77 02 	call	0x4ee	; 0x4ee <__divsf3>
 31c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
 320:	70 e0       	ldi	r23, 0x00	; 0
 322:	80 e0       	ldi	r24, 0x00	; 0
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 1a 03 	call	0x634	; 0x634 <__floatsisf>
 32a:	20 e0       	ldi	r18, 0x00	; 0
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	4f e7       	ldi	r20, 0x7F	; 127
 330:	53 e4       	ldi	r21, 0x43	; 67
 332:	0e 94 0b 02 	call	0x416	; 0x416 <__addsf3>
 336:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
		PWM_setVel4(mov);
 33a:	86 2f       	mov	r24, r22
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 8f 00 	call	0x11e	; 0x11e <PWM_setVel4>
 342:	08 95       	ret
	
		} else if( potenciometro > 520 && potenciometro < 1023){
 344:	9c 01       	movw	r18, r24
 346:	29 50       	subi	r18, 0x09	; 9
 348:	32 40       	sbci	r19, 0x02	; 2
 34a:	26 3f       	cpi	r18, 0xF6	; 246
 34c:	31 40       	sbci	r19, 0x01	; 1
 34e:	20 f5       	brcc	.+72     	; 0x398 <rotacion+0xb2>
		
		PORTD &= ~(1 << PORTD5);  // Apagar PORTD5 
 350:	2b b1       	in	r18, 0x0b	; 11
 352:	2f 7d       	andi	r18, 0xDF	; 223
 354:	2b b9       	out	0x0b, r18	; 11
		PORTD |= (1 << PORTD4);   // Encender PORTD4 
 356:	2b b1       	in	r18, 0x0b	; 11
 358:	20 61       	ori	r18, 0x10	; 16
 35a:	2b b9       	out	0x0b, r18	; 11
		
		//Mandamos el mapeo de joystick abajo
		uint8_t mov2 = (readADC4 * 255.0 / 503.0) - 263.62;  // Convertir a 8 bits
 35c:	bc 01       	movw	r22, r24
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 18 03 	call	0x630	; 0x630 <__floatunsisf>
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	4f e7       	ldi	r20, 0x7F	; 127
 36c:	53 e4       	ldi	r21, 0x43	; 67
 36e:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulsf3>
 372:	20 e0       	ldi	r18, 0x00	; 0
 374:	30 e8       	ldi	r19, 0x80	; 128
 376:	4b ef       	ldi	r20, 0xFB	; 251
 378:	53 e4       	ldi	r21, 0x43	; 67
 37a:	0e 94 77 02 	call	0x4ee	; 0x4ee <__divsf3>
 37e:	2c e5       	ldi	r18, 0x5C	; 92
 380:	3f ec       	ldi	r19, 0xCF	; 207
 382:	43 e8       	ldi	r20, 0x83	; 131
 384:	53 e4       	ldi	r21, 0x43	; 67
 386:	0e 94 0a 02 	call	0x414	; 0x414 <__subsf3>
 38a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
		PWM_setVel4(mov2);
 38e:	86 2f       	mov	r24, r22
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 8f 00 	call	0x11e	; 0x11e <PWM_setVel4>
 396:	08 95       	ret
		
		}else {
		//motor sin moverse
		PORTD &= ~((1 << PORTD5) | (1 << PORTD4));  // Apagar solo PORTD5 y PORTD4
 398:	8b b1       	in	r24, 0x0b	; 11
 39a:	8f 7c       	andi	r24, 0xCF	; 207
 39c:	8b b9       	out	0x0b, r24	; 11
 39e:	08 95       	ret

000003a0 <main>:
//******************************************

int main(void)
{
	
	setup();
 3a0:	0e 94 40 00 	call	0x80	; 0x80 <setup>
	initADC();
 3a4:	0e 94 4a 00 	call	0x94	; 0x94 <initADC>
		//PORTC |= (0 << PORTC2); // aPAGAR LED
	//PINES DE MOTOR B
		//PORTC |= (1 << PORTC3); // Encender LED
		//PORTC |= (0 << PORTC4); // aPAGAR LED
		//controlando motor A
		PWM_motor1();
 3a8:	0e 94 66 00 	call	0xcc	; 0xcc <PWM_motor1>
		_delay_ms(30);
		*/
		//uint8_t vel2 = (uint8_t)(readADC2 * 255.0 / 1023.0);  // Convertir a 8 bits
		//PWM_setVel2(vel2);
		//Controlando motor 3
			uint16_t lectura = leerADC(0);
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	0e 94 51 00 	call	0xa2	; 0xa2 <leerADC>
 3b2:	8c 01       	movw	r16, r24
			uint16_t readADC2 = leerADC(1);
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 51 00 	call	0xa2	; 0xa2 <leerADC>
 3ba:	ec 01       	movw	r28, r24
			control_motor(lectura, readADC2);
 3bc:	bc 01       	movw	r22, r24
 3be:	c8 01       	movw	r24, r16
 3c0:	0e 94 92 00 	call	0x124	; 0x124 <control_motor>
			Joystick_X(lectura);
 3c4:	c8 01       	movw	r24, r16
 3c6:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <Joystick_X>
			Joystick_Y(readADC2);
 3ca:	ce 01       	movw	r24, r28
 3cc:	0e 94 26 01 	call	0x24c	; 0x24c <Joystick_Y>
		
		
		PWM_motor3();
 3d0:	0e 94 76 00 	call	0xec	; 0xec <PWM_motor3>
		uint16_t readADC3 = leerADC(7);
 3d4:	87 e0       	ldi	r24, 0x07	; 7
 3d6:	0e 94 51 00 	call	0xa2	; 0xa2 <leerADC>
		uint8_t vel3 = (uint8_t)(readADC3 * 255.0 / 1023.0);  // Convertir a 8 bits
 3da:	bc 01       	movw	r22, r24
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 18 03 	call	0x630	; 0x630 <__floatunsisf>
 3e4:	20 e0       	ldi	r18, 0x00	; 0
 3e6:	30 e0       	ldi	r19, 0x00	; 0
 3e8:	4f e7       	ldi	r20, 0x7F	; 127
 3ea:	53 e4       	ldi	r21, 0x43	; 67
 3ec:	0e 94 a6 03 	call	0x74c	; 0x74c <__mulsf3>
 3f0:	20 e0       	ldi	r18, 0x00	; 0
 3f2:	30 ec       	ldi	r19, 0xC0	; 192
 3f4:	4f e7       	ldi	r20, 0x7F	; 127
 3f6:	54 e4       	ldi	r21, 0x44	; 68
 3f8:	0e 94 77 02 	call	0x4ee	; 0x4ee <__divsf3>
 3fc:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <__fixunssfsi>
		PWM_setVel3(vel3);
 400:	86 2f       	mov	r24, r22
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	0e 94 8c 00 	call	0x118	; 0x118 <PWM_setVel3>
		//Controlando motor 4
		
		uint16_t readADC4 = leerADC(6);
 408:	86 e0       	ldi	r24, 0x06	; 6
 40a:	0e 94 51 00 	call	0xa2	; 0xa2 <leerADC>
		rotacion(readADC4);
 40e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <rotacion>
 412:	ca cf       	rjmp	.-108    	; 0x3a8 <main+0x8>

00000414 <__subsf3>:
 414:	50 58       	subi	r21, 0x80	; 128

00000416 <__addsf3>:
 416:	bb 27       	eor	r27, r27
 418:	aa 27       	eor	r26, r26
 41a:	0e 94 22 02 	call	0x444	; 0x444 <__addsf3x>
 41e:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_round>
 422:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_pscA>
 426:	38 f0       	brcs	.+14     	; 0x436 <__addsf3+0x20>
 428:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_pscB>
 42c:	20 f0       	brcs	.+8      	; 0x436 <__addsf3+0x20>
 42e:	39 f4       	brne	.+14     	; 0x43e <__addsf3+0x28>
 430:	9f 3f       	cpi	r25, 0xFF	; 255
 432:	19 f4       	brne	.+6      	; 0x43a <__addsf3+0x24>
 434:	26 f4       	brtc	.+8      	; 0x43e <__addsf3+0x28>
 436:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_nan>
 43a:	0e f4       	brtc	.+2      	; 0x43e <__addsf3+0x28>
 43c:	e0 95       	com	r30
 43e:	e7 fb       	bst	r30, 7
 440:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>

00000444 <__addsf3x>:
 444:	e9 2f       	mov	r30, r25
 446:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_split3>
 44a:	58 f3       	brcs	.-42     	; 0x422 <__addsf3+0xc>
 44c:	ba 17       	cp	r27, r26
 44e:	62 07       	cpc	r22, r18
 450:	73 07       	cpc	r23, r19
 452:	84 07       	cpc	r24, r20
 454:	95 07       	cpc	r25, r21
 456:	20 f0       	brcs	.+8      	; 0x460 <__addsf3x+0x1c>
 458:	79 f4       	brne	.+30     	; 0x478 <__addsf3x+0x34>
 45a:	a6 f5       	brtc	.+104    	; 0x4c4 <__addsf3x+0x80>
 45c:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_zero>
 460:	0e f4       	brtc	.+2      	; 0x464 <__addsf3x+0x20>
 462:	e0 95       	com	r30
 464:	0b 2e       	mov	r0, r27
 466:	ba 2f       	mov	r27, r26
 468:	a0 2d       	mov	r26, r0
 46a:	0b 01       	movw	r0, r22
 46c:	b9 01       	movw	r22, r18
 46e:	90 01       	movw	r18, r0
 470:	0c 01       	movw	r0, r24
 472:	ca 01       	movw	r24, r20
 474:	a0 01       	movw	r20, r0
 476:	11 24       	eor	r1, r1
 478:	ff 27       	eor	r31, r31
 47a:	59 1b       	sub	r21, r25
 47c:	99 f0       	breq	.+38     	; 0x4a4 <__addsf3x+0x60>
 47e:	59 3f       	cpi	r21, 0xF9	; 249
 480:	50 f4       	brcc	.+20     	; 0x496 <__addsf3x+0x52>
 482:	50 3e       	cpi	r21, 0xE0	; 224
 484:	68 f1       	brcs	.+90     	; 0x4e0 <__addsf3x+0x9c>
 486:	1a 16       	cp	r1, r26
 488:	f0 40       	sbci	r31, 0x00	; 0
 48a:	a2 2f       	mov	r26, r18
 48c:	23 2f       	mov	r18, r19
 48e:	34 2f       	mov	r19, r20
 490:	44 27       	eor	r20, r20
 492:	58 5f       	subi	r21, 0xF8	; 248
 494:	f3 cf       	rjmp	.-26     	; 0x47c <__addsf3x+0x38>
 496:	46 95       	lsr	r20
 498:	37 95       	ror	r19
 49a:	27 95       	ror	r18
 49c:	a7 95       	ror	r26
 49e:	f0 40       	sbci	r31, 0x00	; 0
 4a0:	53 95       	inc	r21
 4a2:	c9 f7       	brne	.-14     	; 0x496 <__addsf3x+0x52>
 4a4:	7e f4       	brtc	.+30     	; 0x4c4 <__addsf3x+0x80>
 4a6:	1f 16       	cp	r1, r31
 4a8:	ba 0b       	sbc	r27, r26
 4aa:	62 0b       	sbc	r22, r18
 4ac:	73 0b       	sbc	r23, r19
 4ae:	84 0b       	sbc	r24, r20
 4b0:	ba f0       	brmi	.+46     	; 0x4e0 <__addsf3x+0x9c>
 4b2:	91 50       	subi	r25, 0x01	; 1
 4b4:	a1 f0       	breq	.+40     	; 0x4de <__addsf3x+0x9a>
 4b6:	ff 0f       	add	r31, r31
 4b8:	bb 1f       	adc	r27, r27
 4ba:	66 1f       	adc	r22, r22
 4bc:	77 1f       	adc	r23, r23
 4be:	88 1f       	adc	r24, r24
 4c0:	c2 f7       	brpl	.-16     	; 0x4b2 <__addsf3x+0x6e>
 4c2:	0e c0       	rjmp	.+28     	; 0x4e0 <__addsf3x+0x9c>
 4c4:	ba 0f       	add	r27, r26
 4c6:	62 1f       	adc	r22, r18
 4c8:	73 1f       	adc	r23, r19
 4ca:	84 1f       	adc	r24, r20
 4cc:	48 f4       	brcc	.+18     	; 0x4e0 <__addsf3x+0x9c>
 4ce:	87 95       	ror	r24
 4d0:	77 95       	ror	r23
 4d2:	67 95       	ror	r22
 4d4:	b7 95       	ror	r27
 4d6:	f7 95       	ror	r31
 4d8:	9e 3f       	cpi	r25, 0xFE	; 254
 4da:	08 f0       	brcs	.+2      	; 0x4de <__addsf3x+0x9a>
 4dc:	b0 cf       	rjmp	.-160    	; 0x43e <__addsf3+0x28>
 4de:	93 95       	inc	r25
 4e0:	88 0f       	add	r24, r24
 4e2:	08 f0       	brcs	.+2      	; 0x4e6 <__addsf3x+0xa2>
 4e4:	99 27       	eor	r25, r25
 4e6:	ee 0f       	add	r30, r30
 4e8:	97 95       	ror	r25
 4ea:	87 95       	ror	r24
 4ec:	08 95       	ret

000004ee <__divsf3>:
 4ee:	0e 94 8b 02 	call	0x516	; 0x516 <__divsf3x>
 4f2:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_round>
 4f6:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_pscB>
 4fa:	58 f0       	brcs	.+22     	; 0x512 <__divsf3+0x24>
 4fc:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_pscA>
 500:	40 f0       	brcs	.+16     	; 0x512 <__divsf3+0x24>
 502:	29 f4       	brne	.+10     	; 0x50e <__divsf3+0x20>
 504:	5f 3f       	cpi	r21, 0xFF	; 255
 506:	29 f0       	breq	.+10     	; 0x512 <__divsf3+0x24>
 508:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>
 50c:	51 11       	cpse	r21, r1
 50e:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>
 512:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_nan>

00000516 <__divsf3x>:
 516:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_split3>
 51a:	68 f3       	brcs	.-38     	; 0x4f6 <__divsf3+0x8>

0000051c <__divsf3_pse>:
 51c:	99 23       	and	r25, r25
 51e:	b1 f3       	breq	.-20     	; 0x50c <__divsf3+0x1e>
 520:	55 23       	and	r21, r21
 522:	91 f3       	breq	.-28     	; 0x508 <__divsf3+0x1a>
 524:	95 1b       	sub	r25, r21
 526:	55 0b       	sbc	r21, r21
 528:	bb 27       	eor	r27, r27
 52a:	aa 27       	eor	r26, r26
 52c:	62 17       	cp	r22, r18
 52e:	73 07       	cpc	r23, r19
 530:	84 07       	cpc	r24, r20
 532:	38 f0       	brcs	.+14     	; 0x542 <__divsf3_pse+0x26>
 534:	9f 5f       	subi	r25, 0xFF	; 255
 536:	5f 4f       	sbci	r21, 0xFF	; 255
 538:	22 0f       	add	r18, r18
 53a:	33 1f       	adc	r19, r19
 53c:	44 1f       	adc	r20, r20
 53e:	aa 1f       	adc	r26, r26
 540:	a9 f3       	breq	.-22     	; 0x52c <__divsf3_pse+0x10>
 542:	35 d0       	rcall	.+106    	; 0x5ae <__divsf3_pse+0x92>
 544:	0e 2e       	mov	r0, r30
 546:	3a f0       	brmi	.+14     	; 0x556 <__divsf3_pse+0x3a>
 548:	e0 e8       	ldi	r30, 0x80	; 128
 54a:	32 d0       	rcall	.+100    	; 0x5b0 <__divsf3_pse+0x94>
 54c:	91 50       	subi	r25, 0x01	; 1
 54e:	50 40       	sbci	r21, 0x00	; 0
 550:	e6 95       	lsr	r30
 552:	00 1c       	adc	r0, r0
 554:	ca f7       	brpl	.-14     	; 0x548 <__divsf3_pse+0x2c>
 556:	2b d0       	rcall	.+86     	; 0x5ae <__divsf3_pse+0x92>
 558:	fe 2f       	mov	r31, r30
 55a:	29 d0       	rcall	.+82     	; 0x5ae <__divsf3_pse+0x92>
 55c:	66 0f       	add	r22, r22
 55e:	77 1f       	adc	r23, r23
 560:	88 1f       	adc	r24, r24
 562:	bb 1f       	adc	r27, r27
 564:	26 17       	cp	r18, r22
 566:	37 07       	cpc	r19, r23
 568:	48 07       	cpc	r20, r24
 56a:	ab 07       	cpc	r26, r27
 56c:	b0 e8       	ldi	r27, 0x80	; 128
 56e:	09 f0       	breq	.+2      	; 0x572 <__divsf3_pse+0x56>
 570:	bb 0b       	sbc	r27, r27
 572:	80 2d       	mov	r24, r0
 574:	bf 01       	movw	r22, r30
 576:	ff 27       	eor	r31, r31
 578:	93 58       	subi	r25, 0x83	; 131
 57a:	5f 4f       	sbci	r21, 0xFF	; 255
 57c:	3a f0       	brmi	.+14     	; 0x58c <__divsf3_pse+0x70>
 57e:	9e 3f       	cpi	r25, 0xFE	; 254
 580:	51 05       	cpc	r21, r1
 582:	78 f0       	brcs	.+30     	; 0x5a2 <__divsf3_pse+0x86>
 584:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>
 588:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>
 58c:	5f 3f       	cpi	r21, 0xFF	; 255
 58e:	e4 f3       	brlt	.-8      	; 0x588 <__divsf3_pse+0x6c>
 590:	98 3e       	cpi	r25, 0xE8	; 232
 592:	d4 f3       	brlt	.-12     	; 0x588 <__divsf3_pse+0x6c>
 594:	86 95       	lsr	r24
 596:	77 95       	ror	r23
 598:	67 95       	ror	r22
 59a:	b7 95       	ror	r27
 59c:	f7 95       	ror	r31
 59e:	9f 5f       	subi	r25, 0xFF	; 255
 5a0:	c9 f7       	brne	.-14     	; 0x594 <__divsf3_pse+0x78>
 5a2:	88 0f       	add	r24, r24
 5a4:	91 1d       	adc	r25, r1
 5a6:	96 95       	lsr	r25
 5a8:	87 95       	ror	r24
 5aa:	97 f9       	bld	r25, 7
 5ac:	08 95       	ret
 5ae:	e1 e0       	ldi	r30, 0x01	; 1
 5b0:	66 0f       	add	r22, r22
 5b2:	77 1f       	adc	r23, r23
 5b4:	88 1f       	adc	r24, r24
 5b6:	bb 1f       	adc	r27, r27
 5b8:	62 17       	cp	r22, r18
 5ba:	73 07       	cpc	r23, r19
 5bc:	84 07       	cpc	r24, r20
 5be:	ba 07       	cpc	r27, r26
 5c0:	20 f0       	brcs	.+8      	; 0x5ca <__divsf3_pse+0xae>
 5c2:	62 1b       	sub	r22, r18
 5c4:	73 0b       	sbc	r23, r19
 5c6:	84 0b       	sbc	r24, r20
 5c8:	ba 0b       	sbc	r27, r26
 5ca:	ee 1f       	adc	r30, r30
 5cc:	88 f7       	brcc	.-30     	; 0x5b0 <__divsf3_pse+0x94>
 5ce:	e0 95       	com	r30
 5d0:	08 95       	ret

000005d2 <__fixunssfsi>:
 5d2:	0e 94 85 03 	call	0x70a	; 0x70a <__fp_splitA>
 5d6:	88 f0       	brcs	.+34     	; 0x5fa <__fixunssfsi+0x28>
 5d8:	9f 57       	subi	r25, 0x7F	; 127
 5da:	98 f0       	brcs	.+38     	; 0x602 <__fixunssfsi+0x30>
 5dc:	b9 2f       	mov	r27, r25
 5de:	99 27       	eor	r25, r25
 5e0:	b7 51       	subi	r27, 0x17	; 23
 5e2:	b0 f0       	brcs	.+44     	; 0x610 <__fixunssfsi+0x3e>
 5e4:	e1 f0       	breq	.+56     	; 0x61e <__fixunssfsi+0x4c>
 5e6:	66 0f       	add	r22, r22
 5e8:	77 1f       	adc	r23, r23
 5ea:	88 1f       	adc	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	1a f0       	brmi	.+6      	; 0x5f6 <__fixunssfsi+0x24>
 5f0:	ba 95       	dec	r27
 5f2:	c9 f7       	brne	.-14     	; 0x5e6 <__fixunssfsi+0x14>
 5f4:	14 c0       	rjmp	.+40     	; 0x61e <__fixunssfsi+0x4c>
 5f6:	b1 30       	cpi	r27, 0x01	; 1
 5f8:	91 f0       	breq	.+36     	; 0x61e <__fixunssfsi+0x4c>
 5fa:	0e 94 9f 03 	call	0x73e	; 0x73e <__fp_zero>
 5fe:	b1 e0       	ldi	r27, 0x01	; 1
 600:	08 95       	ret
 602:	0c 94 9f 03 	jmp	0x73e	; 0x73e <__fp_zero>
 606:	67 2f       	mov	r22, r23
 608:	78 2f       	mov	r23, r24
 60a:	88 27       	eor	r24, r24
 60c:	b8 5f       	subi	r27, 0xF8	; 248
 60e:	39 f0       	breq	.+14     	; 0x61e <__fixunssfsi+0x4c>
 610:	b9 3f       	cpi	r27, 0xF9	; 249
 612:	cc f3       	brlt	.-14     	; 0x606 <__fixunssfsi+0x34>
 614:	86 95       	lsr	r24
 616:	77 95       	ror	r23
 618:	67 95       	ror	r22
 61a:	b3 95       	inc	r27
 61c:	d9 f7       	brne	.-10     	; 0x614 <__fixunssfsi+0x42>
 61e:	3e f4       	brtc	.+14     	; 0x62e <__fixunssfsi+0x5c>
 620:	90 95       	com	r25
 622:	80 95       	com	r24
 624:	70 95       	com	r23
 626:	61 95       	neg	r22
 628:	7f 4f       	sbci	r23, 0xFF	; 255
 62a:	8f 4f       	sbci	r24, 0xFF	; 255
 62c:	9f 4f       	sbci	r25, 0xFF	; 255
 62e:	08 95       	ret

00000630 <__floatunsisf>:
 630:	e8 94       	clt
 632:	09 c0       	rjmp	.+18     	; 0x646 <__floatsisf+0x12>

00000634 <__floatsisf>:
 634:	97 fb       	bst	r25, 7
 636:	3e f4       	brtc	.+14     	; 0x646 <__floatsisf+0x12>
 638:	90 95       	com	r25
 63a:	80 95       	com	r24
 63c:	70 95       	com	r23
 63e:	61 95       	neg	r22
 640:	7f 4f       	sbci	r23, 0xFF	; 255
 642:	8f 4f       	sbci	r24, 0xFF	; 255
 644:	9f 4f       	sbci	r25, 0xFF	; 255
 646:	99 23       	and	r25, r25
 648:	a9 f0       	breq	.+42     	; 0x674 <__floatsisf+0x40>
 64a:	f9 2f       	mov	r31, r25
 64c:	96 e9       	ldi	r25, 0x96	; 150
 64e:	bb 27       	eor	r27, r27
 650:	93 95       	inc	r25
 652:	f6 95       	lsr	r31
 654:	87 95       	ror	r24
 656:	77 95       	ror	r23
 658:	67 95       	ror	r22
 65a:	b7 95       	ror	r27
 65c:	f1 11       	cpse	r31, r1
 65e:	f8 cf       	rjmp	.-16     	; 0x650 <__floatsisf+0x1c>
 660:	fa f4       	brpl	.+62     	; 0x6a0 <__floatsisf+0x6c>
 662:	bb 0f       	add	r27, r27
 664:	11 f4       	brne	.+4      	; 0x66a <__floatsisf+0x36>
 666:	60 ff       	sbrs	r22, 0
 668:	1b c0       	rjmp	.+54     	; 0x6a0 <__floatsisf+0x6c>
 66a:	6f 5f       	subi	r22, 0xFF	; 255
 66c:	7f 4f       	sbci	r23, 0xFF	; 255
 66e:	8f 4f       	sbci	r24, 0xFF	; 255
 670:	9f 4f       	sbci	r25, 0xFF	; 255
 672:	16 c0       	rjmp	.+44     	; 0x6a0 <__floatsisf+0x6c>
 674:	88 23       	and	r24, r24
 676:	11 f0       	breq	.+4      	; 0x67c <__floatsisf+0x48>
 678:	96 e9       	ldi	r25, 0x96	; 150
 67a:	11 c0       	rjmp	.+34     	; 0x69e <__floatsisf+0x6a>
 67c:	77 23       	and	r23, r23
 67e:	21 f0       	breq	.+8      	; 0x688 <__floatsisf+0x54>
 680:	9e e8       	ldi	r25, 0x8E	; 142
 682:	87 2f       	mov	r24, r23
 684:	76 2f       	mov	r23, r22
 686:	05 c0       	rjmp	.+10     	; 0x692 <__floatsisf+0x5e>
 688:	66 23       	and	r22, r22
 68a:	71 f0       	breq	.+28     	; 0x6a8 <__floatsisf+0x74>
 68c:	96 e8       	ldi	r25, 0x86	; 134
 68e:	86 2f       	mov	r24, r22
 690:	70 e0       	ldi	r23, 0x00	; 0
 692:	60 e0       	ldi	r22, 0x00	; 0
 694:	2a f0       	brmi	.+10     	; 0x6a0 <__floatsisf+0x6c>
 696:	9a 95       	dec	r25
 698:	66 0f       	add	r22, r22
 69a:	77 1f       	adc	r23, r23
 69c:	88 1f       	adc	r24, r24
 69e:	da f7       	brpl	.-10     	; 0x696 <__floatsisf+0x62>
 6a0:	88 0f       	add	r24, r24
 6a2:	96 95       	lsr	r25
 6a4:	87 95       	ror	r24
 6a6:	97 f9       	bld	r25, 7
 6a8:	08 95       	ret

000006aa <__fp_inf>:
 6aa:	97 f9       	bld	r25, 7
 6ac:	9f 67       	ori	r25, 0x7F	; 127
 6ae:	80 e8       	ldi	r24, 0x80	; 128
 6b0:	70 e0       	ldi	r23, 0x00	; 0
 6b2:	60 e0       	ldi	r22, 0x00	; 0
 6b4:	08 95       	ret

000006b6 <__fp_nan>:
 6b6:	9f ef       	ldi	r25, 0xFF	; 255
 6b8:	80 ec       	ldi	r24, 0xC0	; 192
 6ba:	08 95       	ret

000006bc <__fp_pscA>:
 6bc:	00 24       	eor	r0, r0
 6be:	0a 94       	dec	r0
 6c0:	16 16       	cp	r1, r22
 6c2:	17 06       	cpc	r1, r23
 6c4:	18 06       	cpc	r1, r24
 6c6:	09 06       	cpc	r0, r25
 6c8:	08 95       	ret

000006ca <__fp_pscB>:
 6ca:	00 24       	eor	r0, r0
 6cc:	0a 94       	dec	r0
 6ce:	12 16       	cp	r1, r18
 6d0:	13 06       	cpc	r1, r19
 6d2:	14 06       	cpc	r1, r20
 6d4:	05 06       	cpc	r0, r21
 6d6:	08 95       	ret

000006d8 <__fp_round>:
 6d8:	09 2e       	mov	r0, r25
 6da:	03 94       	inc	r0
 6dc:	00 0c       	add	r0, r0
 6de:	11 f4       	brne	.+4      	; 0x6e4 <__fp_round+0xc>
 6e0:	88 23       	and	r24, r24
 6e2:	52 f0       	brmi	.+20     	; 0x6f8 <__fp_round+0x20>
 6e4:	bb 0f       	add	r27, r27
 6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__fp_round+0x20>
 6e8:	bf 2b       	or	r27, r31
 6ea:	11 f4       	brne	.+4      	; 0x6f0 <__fp_round+0x18>
 6ec:	60 ff       	sbrs	r22, 0
 6ee:	04 c0       	rjmp	.+8      	; 0x6f8 <__fp_round+0x20>
 6f0:	6f 5f       	subi	r22, 0xFF	; 255
 6f2:	7f 4f       	sbci	r23, 0xFF	; 255
 6f4:	8f 4f       	sbci	r24, 0xFF	; 255
 6f6:	9f 4f       	sbci	r25, 0xFF	; 255
 6f8:	08 95       	ret

000006fa <__fp_split3>:
 6fa:	57 fd       	sbrc	r21, 7
 6fc:	90 58       	subi	r25, 0x80	; 128
 6fe:	44 0f       	add	r20, r20
 700:	55 1f       	adc	r21, r21
 702:	59 f0       	breq	.+22     	; 0x71a <__fp_splitA+0x10>
 704:	5f 3f       	cpi	r21, 0xFF	; 255
 706:	71 f0       	breq	.+28     	; 0x724 <__fp_splitA+0x1a>
 708:	47 95       	ror	r20

0000070a <__fp_splitA>:
 70a:	88 0f       	add	r24, r24
 70c:	97 fb       	bst	r25, 7
 70e:	99 1f       	adc	r25, r25
 710:	61 f0       	breq	.+24     	; 0x72a <__fp_splitA+0x20>
 712:	9f 3f       	cpi	r25, 0xFF	; 255
 714:	79 f0       	breq	.+30     	; 0x734 <__fp_splitA+0x2a>
 716:	87 95       	ror	r24
 718:	08 95       	ret
 71a:	12 16       	cp	r1, r18
 71c:	13 06       	cpc	r1, r19
 71e:	14 06       	cpc	r1, r20
 720:	55 1f       	adc	r21, r21
 722:	f2 cf       	rjmp	.-28     	; 0x708 <__fp_split3+0xe>
 724:	46 95       	lsr	r20
 726:	f1 df       	rcall	.-30     	; 0x70a <__fp_splitA>
 728:	08 c0       	rjmp	.+16     	; 0x73a <__fp_splitA+0x30>
 72a:	16 16       	cp	r1, r22
 72c:	17 06       	cpc	r1, r23
 72e:	18 06       	cpc	r1, r24
 730:	99 1f       	adc	r25, r25
 732:	f1 cf       	rjmp	.-30     	; 0x716 <__fp_splitA+0xc>
 734:	86 95       	lsr	r24
 736:	71 05       	cpc	r23, r1
 738:	61 05       	cpc	r22, r1
 73a:	08 94       	sec
 73c:	08 95       	ret

0000073e <__fp_zero>:
 73e:	e8 94       	clt

00000740 <__fp_szero>:
 740:	bb 27       	eor	r27, r27
 742:	66 27       	eor	r22, r22
 744:	77 27       	eor	r23, r23
 746:	cb 01       	movw	r24, r22
 748:	97 f9       	bld	r25, 7
 74a:	08 95       	ret

0000074c <__mulsf3>:
 74c:	0e 94 b9 03 	call	0x772	; 0x772 <__mulsf3x>
 750:	0c 94 6c 03 	jmp	0x6d8	; 0x6d8 <__fp_round>
 754:	0e 94 5e 03 	call	0x6bc	; 0x6bc <__fp_pscA>
 758:	38 f0       	brcs	.+14     	; 0x768 <__mulsf3+0x1c>
 75a:	0e 94 65 03 	call	0x6ca	; 0x6ca <__fp_pscB>
 75e:	20 f0       	brcs	.+8      	; 0x768 <__mulsf3+0x1c>
 760:	95 23       	and	r25, r21
 762:	11 f0       	breq	.+4      	; 0x768 <__mulsf3+0x1c>
 764:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>
 768:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__fp_nan>
 76c:	11 24       	eor	r1, r1
 76e:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>

00000772 <__mulsf3x>:
 772:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__fp_split3>
 776:	70 f3       	brcs	.-36     	; 0x754 <__mulsf3+0x8>

00000778 <__mulsf3_pse>:
 778:	95 9f       	mul	r25, r21
 77a:	c1 f3       	breq	.-16     	; 0x76c <__mulsf3+0x20>
 77c:	95 0f       	add	r25, r21
 77e:	50 e0       	ldi	r21, 0x00	; 0
 780:	55 1f       	adc	r21, r21
 782:	62 9f       	mul	r22, r18
 784:	f0 01       	movw	r30, r0
 786:	72 9f       	mul	r23, r18
 788:	bb 27       	eor	r27, r27
 78a:	f0 0d       	add	r31, r0
 78c:	b1 1d       	adc	r27, r1
 78e:	63 9f       	mul	r22, r19
 790:	aa 27       	eor	r26, r26
 792:	f0 0d       	add	r31, r0
 794:	b1 1d       	adc	r27, r1
 796:	aa 1f       	adc	r26, r26
 798:	64 9f       	mul	r22, r20
 79a:	66 27       	eor	r22, r22
 79c:	b0 0d       	add	r27, r0
 79e:	a1 1d       	adc	r26, r1
 7a0:	66 1f       	adc	r22, r22
 7a2:	82 9f       	mul	r24, r18
 7a4:	22 27       	eor	r18, r18
 7a6:	b0 0d       	add	r27, r0
 7a8:	a1 1d       	adc	r26, r1
 7aa:	62 1f       	adc	r22, r18
 7ac:	73 9f       	mul	r23, r19
 7ae:	b0 0d       	add	r27, r0
 7b0:	a1 1d       	adc	r26, r1
 7b2:	62 1f       	adc	r22, r18
 7b4:	83 9f       	mul	r24, r19
 7b6:	a0 0d       	add	r26, r0
 7b8:	61 1d       	adc	r22, r1
 7ba:	22 1f       	adc	r18, r18
 7bc:	74 9f       	mul	r23, r20
 7be:	33 27       	eor	r19, r19
 7c0:	a0 0d       	add	r26, r0
 7c2:	61 1d       	adc	r22, r1
 7c4:	23 1f       	adc	r18, r19
 7c6:	84 9f       	mul	r24, r20
 7c8:	60 0d       	add	r22, r0
 7ca:	21 1d       	adc	r18, r1
 7cc:	82 2f       	mov	r24, r18
 7ce:	76 2f       	mov	r23, r22
 7d0:	6a 2f       	mov	r22, r26
 7d2:	11 24       	eor	r1, r1
 7d4:	9f 57       	subi	r25, 0x7F	; 127
 7d6:	50 40       	sbci	r21, 0x00	; 0
 7d8:	9a f0       	brmi	.+38     	; 0x800 <__DATA_REGION_LENGTH__>
 7da:	f1 f0       	breq	.+60     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7dc:	88 23       	and	r24, r24
 7de:	4a f0       	brmi	.+18     	; 0x7f2 <__mulsf3_pse+0x7a>
 7e0:	ee 0f       	add	r30, r30
 7e2:	ff 1f       	adc	r31, r31
 7e4:	bb 1f       	adc	r27, r27
 7e6:	66 1f       	adc	r22, r22
 7e8:	77 1f       	adc	r23, r23
 7ea:	88 1f       	adc	r24, r24
 7ec:	91 50       	subi	r25, 0x01	; 1
 7ee:	50 40       	sbci	r21, 0x00	; 0
 7f0:	a9 f7       	brne	.-22     	; 0x7dc <__mulsf3_pse+0x64>
 7f2:	9e 3f       	cpi	r25, 0xFE	; 254
 7f4:	51 05       	cpc	r21, r1
 7f6:	80 f0       	brcs	.+32     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7f8:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__fp_inf>
 7fc:	0c 94 a0 03 	jmp	0x740	; 0x740 <__fp_szero>
 800:	5f 3f       	cpi	r21, 0xFF	; 255
 802:	e4 f3       	brlt	.-8      	; 0x7fc <__mulsf3_pse+0x84>
 804:	98 3e       	cpi	r25, 0xE8	; 232
 806:	d4 f3       	brlt	.-12     	; 0x7fc <__mulsf3_pse+0x84>
 808:	86 95       	lsr	r24
 80a:	77 95       	ror	r23
 80c:	67 95       	ror	r22
 80e:	b7 95       	ror	r27
 810:	f7 95       	ror	r31
 812:	e7 95       	ror	r30
 814:	9f 5f       	subi	r25, 0xFF	; 255
 816:	c1 f7       	brne	.-16     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 818:	fe 2b       	or	r31, r30
 81a:	88 0f       	add	r24, r24
 81c:	91 1d       	adc	r25, r1
 81e:	96 95       	lsr	r25
 820:	87 95       	ror	r24
 822:	97 f9       	bld	r25, 7
 824:	08 95       	ret

00000826 <_exit>:
 826:	f8 94       	cli

00000828 <__stop_program>:
 828:	ff cf       	rjmp	.-2      	; 0x828 <__stop_program>
