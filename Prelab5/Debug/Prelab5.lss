
Prelab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000672  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000006c6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000af7  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000866  00000000  00000000  000012ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000640  00000000  00000000  00001b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000130  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000494  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000188  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  000028e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 87 00 	call	0x10e	; 0x10e <main>
  88:	0c 94 37 03 	jmp	0x66e	; 0x66e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <timer0_init>:
#include "Prelab5.h"
#include <avr/io.h>
#include <avr/interrupt.h>
void timer0_init(){
	// 1. Configuración de LEDs
	DDRD = 0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x00;
  94:	1b b8       	out	0x0b, r1	; 11
	// 4. Timer0 para antirrebote (~10ms con 16MHz)
	TCCR0A |= 0x00;
  96:	84 b5       	in	r24, 0x24	; 36
  98:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS02) | (1 << CS00);; // Prescaler de 8
  9a:	85 b5       	in	r24, 0x25	; 37
  9c:	85 60       	ori	r24, 0x05	; 5
  9e:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1 << TOIE0)| (1 << OCIE0A);	
  a0:	83 e0       	ldi	r24, 0x03	; 3
  a2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
	
	sei();
  a6:	78 94       	sei
  a8:	08 95       	ret

000000aa <ADC_init>:
volatile uint8_t mux_state = 0;
volatile  state = 0; 
volatile uint8_t toggle_led = 0;

void ADC_init() {
	ADMUX = 0;
  aa:	ec e7       	ldi	r30, 0x7C	; 124
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	10 82       	st	Z, r1
	ADMUX = (1 << REFS0); // Poner los 5V como referencia
  b0:	80 e4       	ldi	r24, 0x40	; 64
  b2:	80 83       	st	Z, r24
	ADMUX	|= (1 << MUX2) | (1<< MUX1); //Seleccionar el ADC6
  b4:	80 81       	ld	r24, Z
  b6:	86 60       	ori	r24, 0x06	; 6
  b8:	80 83       	st	Z, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0); // velodidad de muestreo de factor de division de 8
  ba:	83 e8       	ldi	r24, 0x83	; 131
  bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  c0:	08 95       	ret

000000c2 <ADC_init2>:
}

void ADC_init2() {  // correcto
	ADMUX = 0;
  c2:	ec e7       	ldi	r30, 0x7C	; 124
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	10 82       	st	Z, r1
	ADMUX = (1 << REFS0); // Poner los 5V como referencia (AVcc)
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX1) | (1 << MUX0); // Seleccionar el ADC3 (PC3)
  cc:	80 81       	ld	r24, Z
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	80 83       	st	Z, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0); //  velocidad de muestreo de 8
  d2:	83 e8       	ldi	r24, 0x83	; 131
  d4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  d8:	08 95       	ret

000000da <ADC_init3>:
	
}

void ADC_init3() {  // correcto
	ADMUX = 0;
  da:	ec e7       	ldi	r30, 0x7C	; 124
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	10 82       	st	Z, r1
	ADMUX = (1 << REFS0); // Poner los 5V como referencia (AVcc)
  e0:	80 e4       	ldi	r24, 0x40	; 64
  e2:	80 83       	st	Z, r24
	ADMUX |= (1 << MUX1); //PC2
  e4:	80 81       	ld	r24, Z
  e6:	82 60       	ori	r24, 0x02	; 2
  e8:	80 83       	st	Z, r24
	ADCSRA = (1 << ADEN) | (1 << ADPS1) | (1 << ADPS0); //  velocidad de muestreo de 8
  ea:	83 e8       	ldi	r24, 0x83	; 131
  ec:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  f0:	08 95       	ret

000000f2 <ADC_read>:
	
}


uint16_t ADC_read() {
	ADCSRA |= (1 << ADSC); // Iniciar conversión
  f2:	ea e7       	ldi	r30, 0x7A	; 122
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	80 64       	ori	r24, 0x40	; 64
  fa:	80 83       	st	Z, r24
	while (ADCSRA & (1 << ADSC)); // Esperar a que termine
  fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 100:	86 fd       	sbrc	r24, 6
 102:	fc cf       	rjmp	.-8      	; 0xfc <ADC_read+0xa>
	return ADC; // Leer el resultado
 104:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 108:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
}
 10c:	08 95       	ret

0000010e <main>:



int main(void) {
		timer0_init();
 10e:	0e 94 48 00 	call	0x90	; 0x90 <timer0_init>
		OCR0A = 128;
 112:	80 e8       	ldi	r24, 0x80	; 128
 114:	87 bd       	out	0x27, r24	; 39
	
	while (1) {
		//servo 1
		
		ADC_init();
 116:	0e 94 55 00 	call	0xaa	; 0xaa <ADC_init>
		PWM_init();
 11a:	0e 94 0c 01 	call	0x218	; 0x218 <PWM_init>
		uint16_t adc = ADC_read(); // 0 - 1023
 11e:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_read>
		uint16_t angle = (adc * 3.5229) + 1199.0; // Mapear a 0-180 grados
 122:	bc 01       	movw	r22, r24
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	0e 94 3c 02 	call	0x478	; 0x478 <__floatunsisf>
 12c:	22 e3       	ldi	r18, 0x32	; 50
 12e:	37 e7       	ldi	r19, 0x77	; 119
 130:	41 e6       	ldi	r20, 0x61	; 97
 132:	50 e4       	ldi	r21, 0x40	; 64
 134:	0e 94 ca 02 	call	0x594	; 0x594 <__mulsf3>
 138:	20 e0       	ldi	r18, 0x00	; 0
 13a:	30 ee       	ldi	r19, 0xE0	; 224
 13c:	45 e9       	ldi	r20, 0x95	; 149
 13e:	54 e4       	ldi	r21, 0x44	; 68
 140:	0e 94 2f 01 	call	0x25e	; 0x25e <__addsf3>
 144:	0e 94 0d 02 	call	0x41a	; 0x41a <__fixunssfsi>
		PWM_setAngle(angle);
 148:	cb 01       	movw	r24, r22
 14a:	0e 94 1c 01 	call	0x238	; 0x238 <PWM_setAngle>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	8f e3       	ldi	r24, 0x3F	; 63
 150:	9c e9       	ldi	r25, 0x9C	; 156
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0x44>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x4a>
 158:	00 00       	nop
		_delay_ms(10);
		//servo 2
		ADC_init2();
 15a:	0e 94 61 00 	call	0xc2	; 0xc2 <ADC_init2>
		PWM_init2();
 15e:	0e 94 21 01 	call	0x242	; 0x242 <PWM_init2>
		uint16_t adcarry = ADC_read(); // 0 - 1023
 162:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_read>
		uint16_t duty = (adcarry * 283.0/10000.0)+9.0; // Mapear a 0-180 grados
 166:	bc 01       	movw	r22, r24
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 3c 02 	call	0x478	; 0x478 <__floatunsisf>
 170:	20 e0       	ldi	r18, 0x00	; 0
 172:	30 e8       	ldi	r19, 0x80	; 128
 174:	4d e8       	ldi	r20, 0x8D	; 141
 176:	53 e4       	ldi	r21, 0x43	; 67
 178:	0e 94 ca 02 	call	0x594	; 0x594 <__mulsf3>
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	30 e4       	ldi	r19, 0x40	; 64
 180:	4c e1       	ldi	r20, 0x1C	; 28
 182:	56 e4       	ldi	r21, 0x46	; 70
 184:	0e 94 9b 01 	call	0x336	; 0x336 <__divsf3>
 188:	20 e0       	ldi	r18, 0x00	; 0
 18a:	30 e0       	ldi	r19, 0x00	; 0
 18c:	40 e1       	ldi	r20, 0x10	; 16
 18e:	51 e4       	ldi	r21, 0x41	; 65
 190:	0e 94 2f 01 	call	0x25e	; 0x25e <__addsf3>
 194:	0e 94 0d 02 	call	0x41a	; 0x41a <__fixunssfsi>
		PWM_setDuty2(duty);
 198:	cb 01       	movw	r24, r22
 19a:	0e 94 2b 01 	call	0x256	; 0x256 <PWM_setDuty2>
 19e:	8f e3       	ldi	r24, 0x3F	; 63
 1a0:	9c e9       	ldi	r25, 0x9C	; 156
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x94>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <main+0x9a>
 1a8:	00 00       	nop
		_delay_ms(10);
		//logica led
		ADC_init3();
 1aa:	0e 94 6d 00 	call	0xda	; 0xda <ADC_init3>
		uint16_t led = ADC_read()*255.0/1023.0;
 1ae:	0e 94 79 00 	call	0xf2	; 0xf2 <ADC_read>
 1b2:	bc 01       	movw	r22, r24
 1b4:	80 e0       	ldi	r24, 0x00	; 0
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 3c 02 	call	0x478	; 0x478 <__floatunsisf>
 1bc:	20 e0       	ldi	r18, 0x00	; 0
 1be:	30 e0       	ldi	r19, 0x00	; 0
 1c0:	4f e7       	ldi	r20, 0x7F	; 127
 1c2:	53 e4       	ldi	r21, 0x43	; 67
 1c4:	0e 94 ca 02 	call	0x594	; 0x594 <__mulsf3>
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 ec       	ldi	r19, 0xC0	; 192
 1cc:	4f e7       	ldi	r20, 0x7F	; 127
 1ce:	54 e4       	ldi	r21, 0x44	; 68
 1d0:	0e 94 9b 01 	call	0x336	; 0x336 <__divsf3>
 1d4:	0e 94 0d 02 	call	0x41a	; 0x41a <__fixunssfsi>
		OCR0A = led; 
 1d8:	67 bd       	out	0x27, r22	; 39
 1da:	9d cf       	rjmp	.-198    	; 0x116 <main+0x8>

000001dc <__vector_16>:
	}
}

//Rutina de interrupcion (timer0)
ISR(TIMER0_OVF_vect)
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	8f 93       	push	r24
	PORTD |= (1 << PORTD2); // Encender LED
 1e8:	8b b1       	in	r24, 0x0b	; 11
 1ea:	84 60       	ori	r24, 0x04	; 4
 1ec:	8b b9       	out	0x0b, r24	; 11
		PORTD |= (1 << PORTD2); // Encender LED
		} else {
		PORTD &= ~(1 << PORTD2); // Apagar LED
	}
	*/
}
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_14>:

ISR(TIMER0_COMPA_vect){
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
	
	PORTD &= ~(1 << PORTD2); // Encender LED
 206:	8b b1       	in	r24, 0x0b	; 11
 208:	8b 7f       	andi	r24, 0xFB	; 251
 20a:	8b b9       	out	0x0b, r24	; 11
	
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <PWM_init>:
 */ 
#include "Prelab5.h"

void PWM_init() {
	// Fast PWM, modo 14: TOP = ICR1
	TCCR1A = (1 << COM1A1) | (1 << WGM11);
 218:	82 e8       	ldi	r24, 0x82	; 130
 21a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS11); // prescaler 8
 21e:	8a e1       	ldi	r24, 0x1A	; 26
 220:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>

	ICR1 = 40000; // TOP = 20 ms con reloj de 16MHz y prescaler 8
 224:	80 e4       	ldi	r24, 0x40	; 64
 226:	9c e9       	ldi	r25, 0x9C	; 156
 228:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 22c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRB |= (1 << PORTB1) ; // OC1A (D9) como salida
 230:	84 b1       	in	r24, 0x04	; 4
 232:	82 60       	ori	r24, 0x02	; 2
 234:	84 b9       	out	0x04, r24	; 4
 236:	08 95       	ret

00000238 <PWM_setAngle>:
}

void PWM_setAngle(uint16_t angle) {
	OCR1A = angle;
 238:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 23c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 240:	08 95       	ret

00000242 <PWM_init2>:

#include "Tralala.h"

void PWM_init2() {
	 // Configurar Timer2 para modo Phase Correct PWM con TOP=0xFF
	 TCCR2A = (1 << COM2B1) | (1 << WGM20); // Non-inverting, Phase Correct PWM
 242:	81 e2       	ldi	r24, 0x21	; 33
 244:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
	 TCCR2B = (1 << CS22)|(1 << CS21)| (1 << CS20); // Prescaler de 1024 (ajustar según necesidades)
 248:	87 e0       	ldi	r24, 0x07	; 7
 24a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	 
	 DDRD |= (1 << PORTD3); // OC2B (PD3) como salida
 24e:	8a b1       	in	r24, 0x0a	; 10
 250:	88 60       	ori	r24, 0x08	; 8
 252:	8a b9       	out	0x0a, r24	; 10
 254:	08 95       	ret

00000256 <PWM_setDuty2>:
 }

void PWM_setDuty2(uint8_t duty) {
	// Mapear ángulo (0-180) a ancho de pulso (ej. 5-25 para 50Hz)
	 OCR2B = duty;
 256:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7f80b4>
 25a:	08 95       	ret

0000025c <__subsf3>:
 25c:	50 58       	subi	r21, 0x80	; 128

0000025e <__addsf3>:
 25e:	bb 27       	eor	r27, r27
 260:	aa 27       	eor	r26, r26
 262:	0e 94 46 01 	call	0x28c	; 0x28c <__addsf3x>
 266:	0c 94 90 02 	jmp	0x520	; 0x520 <__fp_round>
 26a:	0e 94 82 02 	call	0x504	; 0x504 <__fp_pscA>
 26e:	38 f0       	brcs	.+14     	; 0x27e <__addsf3+0x20>
 270:	0e 94 89 02 	call	0x512	; 0x512 <__fp_pscB>
 274:	20 f0       	brcs	.+8      	; 0x27e <__addsf3+0x20>
 276:	39 f4       	brne	.+14     	; 0x286 <__addsf3+0x28>
 278:	9f 3f       	cpi	r25, 0xFF	; 255
 27a:	19 f4       	brne	.+6      	; 0x282 <__addsf3+0x24>
 27c:	26 f4       	brtc	.+8      	; 0x286 <__addsf3+0x28>
 27e:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__fp_nan>
 282:	0e f4       	brtc	.+2      	; 0x286 <__addsf3+0x28>
 284:	e0 95       	com	r30
 286:	e7 fb       	bst	r30, 7
 288:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_inf>

0000028c <__addsf3x>:
 28c:	e9 2f       	mov	r30, r25
 28e:	0e 94 a1 02 	call	0x542	; 0x542 <__fp_split3>
 292:	58 f3       	brcs	.-42     	; 0x26a <__addsf3+0xc>
 294:	ba 17       	cp	r27, r26
 296:	62 07       	cpc	r22, r18
 298:	73 07       	cpc	r23, r19
 29a:	84 07       	cpc	r24, r20
 29c:	95 07       	cpc	r25, r21
 29e:	20 f0       	brcs	.+8      	; 0x2a8 <__addsf3x+0x1c>
 2a0:	79 f4       	brne	.+30     	; 0x2c0 <__addsf3x+0x34>
 2a2:	a6 f5       	brtc	.+104    	; 0x30c <__addsf3x+0x80>
 2a4:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_zero>
 2a8:	0e f4       	brtc	.+2      	; 0x2ac <__addsf3x+0x20>
 2aa:	e0 95       	com	r30
 2ac:	0b 2e       	mov	r0, r27
 2ae:	ba 2f       	mov	r27, r26
 2b0:	a0 2d       	mov	r26, r0
 2b2:	0b 01       	movw	r0, r22
 2b4:	b9 01       	movw	r22, r18
 2b6:	90 01       	movw	r18, r0
 2b8:	0c 01       	movw	r0, r24
 2ba:	ca 01       	movw	r24, r20
 2bc:	a0 01       	movw	r20, r0
 2be:	11 24       	eor	r1, r1
 2c0:	ff 27       	eor	r31, r31
 2c2:	59 1b       	sub	r21, r25
 2c4:	99 f0       	breq	.+38     	; 0x2ec <__addsf3x+0x60>
 2c6:	59 3f       	cpi	r21, 0xF9	; 249
 2c8:	50 f4       	brcc	.+20     	; 0x2de <__addsf3x+0x52>
 2ca:	50 3e       	cpi	r21, 0xE0	; 224
 2cc:	68 f1       	brcs	.+90     	; 0x328 <__addsf3x+0x9c>
 2ce:	1a 16       	cp	r1, r26
 2d0:	f0 40       	sbci	r31, 0x00	; 0
 2d2:	a2 2f       	mov	r26, r18
 2d4:	23 2f       	mov	r18, r19
 2d6:	34 2f       	mov	r19, r20
 2d8:	44 27       	eor	r20, r20
 2da:	58 5f       	subi	r21, 0xF8	; 248
 2dc:	f3 cf       	rjmp	.-26     	; 0x2c4 <__addsf3x+0x38>
 2de:	46 95       	lsr	r20
 2e0:	37 95       	ror	r19
 2e2:	27 95       	ror	r18
 2e4:	a7 95       	ror	r26
 2e6:	f0 40       	sbci	r31, 0x00	; 0
 2e8:	53 95       	inc	r21
 2ea:	c9 f7       	brne	.-14     	; 0x2de <__addsf3x+0x52>
 2ec:	7e f4       	brtc	.+30     	; 0x30c <__addsf3x+0x80>
 2ee:	1f 16       	cp	r1, r31
 2f0:	ba 0b       	sbc	r27, r26
 2f2:	62 0b       	sbc	r22, r18
 2f4:	73 0b       	sbc	r23, r19
 2f6:	84 0b       	sbc	r24, r20
 2f8:	ba f0       	brmi	.+46     	; 0x328 <__addsf3x+0x9c>
 2fa:	91 50       	subi	r25, 0x01	; 1
 2fc:	a1 f0       	breq	.+40     	; 0x326 <__addsf3x+0x9a>
 2fe:	ff 0f       	add	r31, r31
 300:	bb 1f       	adc	r27, r27
 302:	66 1f       	adc	r22, r22
 304:	77 1f       	adc	r23, r23
 306:	88 1f       	adc	r24, r24
 308:	c2 f7       	brpl	.-16     	; 0x2fa <__addsf3x+0x6e>
 30a:	0e c0       	rjmp	.+28     	; 0x328 <__addsf3x+0x9c>
 30c:	ba 0f       	add	r27, r26
 30e:	62 1f       	adc	r22, r18
 310:	73 1f       	adc	r23, r19
 312:	84 1f       	adc	r24, r20
 314:	48 f4       	brcc	.+18     	; 0x328 <__addsf3x+0x9c>
 316:	87 95       	ror	r24
 318:	77 95       	ror	r23
 31a:	67 95       	ror	r22
 31c:	b7 95       	ror	r27
 31e:	f7 95       	ror	r31
 320:	9e 3f       	cpi	r25, 0xFE	; 254
 322:	08 f0       	brcs	.+2      	; 0x326 <__addsf3x+0x9a>
 324:	b0 cf       	rjmp	.-160    	; 0x286 <__addsf3+0x28>
 326:	93 95       	inc	r25
 328:	88 0f       	add	r24, r24
 32a:	08 f0       	brcs	.+2      	; 0x32e <__addsf3x+0xa2>
 32c:	99 27       	eor	r25, r25
 32e:	ee 0f       	add	r30, r30
 330:	97 95       	ror	r25
 332:	87 95       	ror	r24
 334:	08 95       	ret

00000336 <__divsf3>:
 336:	0e 94 af 01 	call	0x35e	; 0x35e <__divsf3x>
 33a:	0c 94 90 02 	jmp	0x520	; 0x520 <__fp_round>
 33e:	0e 94 89 02 	call	0x512	; 0x512 <__fp_pscB>
 342:	58 f0       	brcs	.+22     	; 0x35a <__divsf3+0x24>
 344:	0e 94 82 02 	call	0x504	; 0x504 <__fp_pscA>
 348:	40 f0       	brcs	.+16     	; 0x35a <__divsf3+0x24>
 34a:	29 f4       	brne	.+10     	; 0x356 <__divsf3+0x20>
 34c:	5f 3f       	cpi	r21, 0xFF	; 255
 34e:	29 f0       	breq	.+10     	; 0x35a <__divsf3+0x24>
 350:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_inf>
 354:	51 11       	cpse	r21, r1
 356:	0c 94 c4 02 	jmp	0x588	; 0x588 <__fp_szero>
 35a:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__fp_nan>

0000035e <__divsf3x>:
 35e:	0e 94 a1 02 	call	0x542	; 0x542 <__fp_split3>
 362:	68 f3       	brcs	.-38     	; 0x33e <__divsf3+0x8>

00000364 <__divsf3_pse>:
 364:	99 23       	and	r25, r25
 366:	b1 f3       	breq	.-20     	; 0x354 <__divsf3+0x1e>
 368:	55 23       	and	r21, r21
 36a:	91 f3       	breq	.-28     	; 0x350 <__divsf3+0x1a>
 36c:	95 1b       	sub	r25, r21
 36e:	55 0b       	sbc	r21, r21
 370:	bb 27       	eor	r27, r27
 372:	aa 27       	eor	r26, r26
 374:	62 17       	cp	r22, r18
 376:	73 07       	cpc	r23, r19
 378:	84 07       	cpc	r24, r20
 37a:	38 f0       	brcs	.+14     	; 0x38a <__divsf3_pse+0x26>
 37c:	9f 5f       	subi	r25, 0xFF	; 255
 37e:	5f 4f       	sbci	r21, 0xFF	; 255
 380:	22 0f       	add	r18, r18
 382:	33 1f       	adc	r19, r19
 384:	44 1f       	adc	r20, r20
 386:	aa 1f       	adc	r26, r26
 388:	a9 f3       	breq	.-22     	; 0x374 <__divsf3_pse+0x10>
 38a:	35 d0       	rcall	.+106    	; 0x3f6 <__divsf3_pse+0x92>
 38c:	0e 2e       	mov	r0, r30
 38e:	3a f0       	brmi	.+14     	; 0x39e <__divsf3_pse+0x3a>
 390:	e0 e8       	ldi	r30, 0x80	; 128
 392:	32 d0       	rcall	.+100    	; 0x3f8 <__divsf3_pse+0x94>
 394:	91 50       	subi	r25, 0x01	; 1
 396:	50 40       	sbci	r21, 0x00	; 0
 398:	e6 95       	lsr	r30
 39a:	00 1c       	adc	r0, r0
 39c:	ca f7       	brpl	.-14     	; 0x390 <__divsf3_pse+0x2c>
 39e:	2b d0       	rcall	.+86     	; 0x3f6 <__divsf3_pse+0x92>
 3a0:	fe 2f       	mov	r31, r30
 3a2:	29 d0       	rcall	.+82     	; 0x3f6 <__divsf3_pse+0x92>
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	88 1f       	adc	r24, r24
 3aa:	bb 1f       	adc	r27, r27
 3ac:	26 17       	cp	r18, r22
 3ae:	37 07       	cpc	r19, r23
 3b0:	48 07       	cpc	r20, r24
 3b2:	ab 07       	cpc	r26, r27
 3b4:	b0 e8       	ldi	r27, 0x80	; 128
 3b6:	09 f0       	breq	.+2      	; 0x3ba <__divsf3_pse+0x56>
 3b8:	bb 0b       	sbc	r27, r27
 3ba:	80 2d       	mov	r24, r0
 3bc:	bf 01       	movw	r22, r30
 3be:	ff 27       	eor	r31, r31
 3c0:	93 58       	subi	r25, 0x83	; 131
 3c2:	5f 4f       	sbci	r21, 0xFF	; 255
 3c4:	3a f0       	brmi	.+14     	; 0x3d4 <__divsf3_pse+0x70>
 3c6:	9e 3f       	cpi	r25, 0xFE	; 254
 3c8:	51 05       	cpc	r21, r1
 3ca:	78 f0       	brcs	.+30     	; 0x3ea <__divsf3_pse+0x86>
 3cc:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_inf>
 3d0:	0c 94 c4 02 	jmp	0x588	; 0x588 <__fp_szero>
 3d4:	5f 3f       	cpi	r21, 0xFF	; 255
 3d6:	e4 f3       	brlt	.-8      	; 0x3d0 <__divsf3_pse+0x6c>
 3d8:	98 3e       	cpi	r25, 0xE8	; 232
 3da:	d4 f3       	brlt	.-12     	; 0x3d0 <__divsf3_pse+0x6c>
 3dc:	86 95       	lsr	r24
 3de:	77 95       	ror	r23
 3e0:	67 95       	ror	r22
 3e2:	b7 95       	ror	r27
 3e4:	f7 95       	ror	r31
 3e6:	9f 5f       	subi	r25, 0xFF	; 255
 3e8:	c9 f7       	brne	.-14     	; 0x3dc <__divsf3_pse+0x78>
 3ea:	88 0f       	add	r24, r24
 3ec:	91 1d       	adc	r25, r1
 3ee:	96 95       	lsr	r25
 3f0:	87 95       	ror	r24
 3f2:	97 f9       	bld	r25, 7
 3f4:	08 95       	ret
 3f6:	e1 e0       	ldi	r30, 0x01	; 1
 3f8:	66 0f       	add	r22, r22
 3fa:	77 1f       	adc	r23, r23
 3fc:	88 1f       	adc	r24, r24
 3fe:	bb 1f       	adc	r27, r27
 400:	62 17       	cp	r22, r18
 402:	73 07       	cpc	r23, r19
 404:	84 07       	cpc	r24, r20
 406:	ba 07       	cpc	r27, r26
 408:	20 f0       	brcs	.+8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 40a:	62 1b       	sub	r22, r18
 40c:	73 0b       	sbc	r23, r19
 40e:	84 0b       	sbc	r24, r20
 410:	ba 0b       	sbc	r27, r26
 412:	ee 1f       	adc	r30, r30
 414:	88 f7       	brcc	.-30     	; 0x3f8 <__divsf3_pse+0x94>
 416:	e0 95       	com	r30
 418:	08 95       	ret

0000041a <__fixunssfsi>:
 41a:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_splitA>
 41e:	88 f0       	brcs	.+34     	; 0x442 <__fixunssfsi+0x28>
 420:	9f 57       	subi	r25, 0x7F	; 127
 422:	98 f0       	brcs	.+38     	; 0x44a <__fixunssfsi+0x30>
 424:	b9 2f       	mov	r27, r25
 426:	99 27       	eor	r25, r25
 428:	b7 51       	subi	r27, 0x17	; 23
 42a:	b0 f0       	brcs	.+44     	; 0x458 <__fixunssfsi+0x3e>
 42c:	e1 f0       	breq	.+56     	; 0x466 <__fixunssfsi+0x4c>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	88 1f       	adc	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	1a f0       	brmi	.+6      	; 0x43e <__fixunssfsi+0x24>
 438:	ba 95       	dec	r27
 43a:	c9 f7       	brne	.-14     	; 0x42e <__fixunssfsi+0x14>
 43c:	14 c0       	rjmp	.+40     	; 0x466 <__fixunssfsi+0x4c>
 43e:	b1 30       	cpi	r27, 0x01	; 1
 440:	91 f0       	breq	.+36     	; 0x466 <__fixunssfsi+0x4c>
 442:	0e 94 c3 02 	call	0x586	; 0x586 <__fp_zero>
 446:	b1 e0       	ldi	r27, 0x01	; 1
 448:	08 95       	ret
 44a:	0c 94 c3 02 	jmp	0x586	; 0x586 <__fp_zero>
 44e:	67 2f       	mov	r22, r23
 450:	78 2f       	mov	r23, r24
 452:	88 27       	eor	r24, r24
 454:	b8 5f       	subi	r27, 0xF8	; 248
 456:	39 f0       	breq	.+14     	; 0x466 <__fixunssfsi+0x4c>
 458:	b9 3f       	cpi	r27, 0xF9	; 249
 45a:	cc f3       	brlt	.-14     	; 0x44e <__fixunssfsi+0x34>
 45c:	86 95       	lsr	r24
 45e:	77 95       	ror	r23
 460:	67 95       	ror	r22
 462:	b3 95       	inc	r27
 464:	d9 f7       	brne	.-10     	; 0x45c <__fixunssfsi+0x42>
 466:	3e f4       	brtc	.+14     	; 0x476 <__fixunssfsi+0x5c>
 468:	90 95       	com	r25
 46a:	80 95       	com	r24
 46c:	70 95       	com	r23
 46e:	61 95       	neg	r22
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	8f 4f       	sbci	r24, 0xFF	; 255
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	08 95       	ret

00000478 <__floatunsisf>:
 478:	e8 94       	clt
 47a:	09 c0       	rjmp	.+18     	; 0x48e <__floatsisf+0x12>

0000047c <__floatsisf>:
 47c:	97 fb       	bst	r25, 7
 47e:	3e f4       	brtc	.+14     	; 0x48e <__floatsisf+0x12>
 480:	90 95       	com	r25
 482:	80 95       	com	r24
 484:	70 95       	com	r23
 486:	61 95       	neg	r22
 488:	7f 4f       	sbci	r23, 0xFF	; 255
 48a:	8f 4f       	sbci	r24, 0xFF	; 255
 48c:	9f 4f       	sbci	r25, 0xFF	; 255
 48e:	99 23       	and	r25, r25
 490:	a9 f0       	breq	.+42     	; 0x4bc <__floatsisf+0x40>
 492:	f9 2f       	mov	r31, r25
 494:	96 e9       	ldi	r25, 0x96	; 150
 496:	bb 27       	eor	r27, r27
 498:	93 95       	inc	r25
 49a:	f6 95       	lsr	r31
 49c:	87 95       	ror	r24
 49e:	77 95       	ror	r23
 4a0:	67 95       	ror	r22
 4a2:	b7 95       	ror	r27
 4a4:	f1 11       	cpse	r31, r1
 4a6:	f8 cf       	rjmp	.-16     	; 0x498 <__floatsisf+0x1c>
 4a8:	fa f4       	brpl	.+62     	; 0x4e8 <__floatsisf+0x6c>
 4aa:	bb 0f       	add	r27, r27
 4ac:	11 f4       	brne	.+4      	; 0x4b2 <__floatsisf+0x36>
 4ae:	60 ff       	sbrs	r22, 0
 4b0:	1b c0       	rjmp	.+54     	; 0x4e8 <__floatsisf+0x6c>
 4b2:	6f 5f       	subi	r22, 0xFF	; 255
 4b4:	7f 4f       	sbci	r23, 0xFF	; 255
 4b6:	8f 4f       	sbci	r24, 0xFF	; 255
 4b8:	9f 4f       	sbci	r25, 0xFF	; 255
 4ba:	16 c0       	rjmp	.+44     	; 0x4e8 <__floatsisf+0x6c>
 4bc:	88 23       	and	r24, r24
 4be:	11 f0       	breq	.+4      	; 0x4c4 <__floatsisf+0x48>
 4c0:	96 e9       	ldi	r25, 0x96	; 150
 4c2:	11 c0       	rjmp	.+34     	; 0x4e6 <__floatsisf+0x6a>
 4c4:	77 23       	and	r23, r23
 4c6:	21 f0       	breq	.+8      	; 0x4d0 <__floatsisf+0x54>
 4c8:	9e e8       	ldi	r25, 0x8E	; 142
 4ca:	87 2f       	mov	r24, r23
 4cc:	76 2f       	mov	r23, r22
 4ce:	05 c0       	rjmp	.+10     	; 0x4da <__floatsisf+0x5e>
 4d0:	66 23       	and	r22, r22
 4d2:	71 f0       	breq	.+28     	; 0x4f0 <__floatsisf+0x74>
 4d4:	96 e8       	ldi	r25, 0x86	; 134
 4d6:	86 2f       	mov	r24, r22
 4d8:	70 e0       	ldi	r23, 0x00	; 0
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	2a f0       	brmi	.+10     	; 0x4e8 <__floatsisf+0x6c>
 4de:	9a 95       	dec	r25
 4e0:	66 0f       	add	r22, r22
 4e2:	77 1f       	adc	r23, r23
 4e4:	88 1f       	adc	r24, r24
 4e6:	da f7       	brpl	.-10     	; 0x4de <__floatsisf+0x62>
 4e8:	88 0f       	add	r24, r24
 4ea:	96 95       	lsr	r25
 4ec:	87 95       	ror	r24
 4ee:	97 f9       	bld	r25, 7
 4f0:	08 95       	ret

000004f2 <__fp_inf>:
 4f2:	97 f9       	bld	r25, 7
 4f4:	9f 67       	ori	r25, 0x7F	; 127
 4f6:	80 e8       	ldi	r24, 0x80	; 128
 4f8:	70 e0       	ldi	r23, 0x00	; 0
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	08 95       	ret

000004fe <__fp_nan>:
 4fe:	9f ef       	ldi	r25, 0xFF	; 255
 500:	80 ec       	ldi	r24, 0xC0	; 192
 502:	08 95       	ret

00000504 <__fp_pscA>:
 504:	00 24       	eor	r0, r0
 506:	0a 94       	dec	r0
 508:	16 16       	cp	r1, r22
 50a:	17 06       	cpc	r1, r23
 50c:	18 06       	cpc	r1, r24
 50e:	09 06       	cpc	r0, r25
 510:	08 95       	ret

00000512 <__fp_pscB>:
 512:	00 24       	eor	r0, r0
 514:	0a 94       	dec	r0
 516:	12 16       	cp	r1, r18
 518:	13 06       	cpc	r1, r19
 51a:	14 06       	cpc	r1, r20
 51c:	05 06       	cpc	r0, r21
 51e:	08 95       	ret

00000520 <__fp_round>:
 520:	09 2e       	mov	r0, r25
 522:	03 94       	inc	r0
 524:	00 0c       	add	r0, r0
 526:	11 f4       	brne	.+4      	; 0x52c <__fp_round+0xc>
 528:	88 23       	and	r24, r24
 52a:	52 f0       	brmi	.+20     	; 0x540 <__fp_round+0x20>
 52c:	bb 0f       	add	r27, r27
 52e:	40 f4       	brcc	.+16     	; 0x540 <__fp_round+0x20>
 530:	bf 2b       	or	r27, r31
 532:	11 f4       	brne	.+4      	; 0x538 <__fp_round+0x18>
 534:	60 ff       	sbrs	r22, 0
 536:	04 c0       	rjmp	.+8      	; 0x540 <__fp_round+0x20>
 538:	6f 5f       	subi	r22, 0xFF	; 255
 53a:	7f 4f       	sbci	r23, 0xFF	; 255
 53c:	8f 4f       	sbci	r24, 0xFF	; 255
 53e:	9f 4f       	sbci	r25, 0xFF	; 255
 540:	08 95       	ret

00000542 <__fp_split3>:
 542:	57 fd       	sbrc	r21, 7
 544:	90 58       	subi	r25, 0x80	; 128
 546:	44 0f       	add	r20, r20
 548:	55 1f       	adc	r21, r21
 54a:	59 f0       	breq	.+22     	; 0x562 <__fp_splitA+0x10>
 54c:	5f 3f       	cpi	r21, 0xFF	; 255
 54e:	71 f0       	breq	.+28     	; 0x56c <__fp_splitA+0x1a>
 550:	47 95       	ror	r20

00000552 <__fp_splitA>:
 552:	88 0f       	add	r24, r24
 554:	97 fb       	bst	r25, 7
 556:	99 1f       	adc	r25, r25
 558:	61 f0       	breq	.+24     	; 0x572 <__fp_splitA+0x20>
 55a:	9f 3f       	cpi	r25, 0xFF	; 255
 55c:	79 f0       	breq	.+30     	; 0x57c <__fp_splitA+0x2a>
 55e:	87 95       	ror	r24
 560:	08 95       	ret
 562:	12 16       	cp	r1, r18
 564:	13 06       	cpc	r1, r19
 566:	14 06       	cpc	r1, r20
 568:	55 1f       	adc	r21, r21
 56a:	f2 cf       	rjmp	.-28     	; 0x550 <__fp_split3+0xe>
 56c:	46 95       	lsr	r20
 56e:	f1 df       	rcall	.-30     	; 0x552 <__fp_splitA>
 570:	08 c0       	rjmp	.+16     	; 0x582 <__fp_splitA+0x30>
 572:	16 16       	cp	r1, r22
 574:	17 06       	cpc	r1, r23
 576:	18 06       	cpc	r1, r24
 578:	99 1f       	adc	r25, r25
 57a:	f1 cf       	rjmp	.-30     	; 0x55e <__fp_splitA+0xc>
 57c:	86 95       	lsr	r24
 57e:	71 05       	cpc	r23, r1
 580:	61 05       	cpc	r22, r1
 582:	08 94       	sec
 584:	08 95       	ret

00000586 <__fp_zero>:
 586:	e8 94       	clt

00000588 <__fp_szero>:
 588:	bb 27       	eor	r27, r27
 58a:	66 27       	eor	r22, r22
 58c:	77 27       	eor	r23, r23
 58e:	cb 01       	movw	r24, r22
 590:	97 f9       	bld	r25, 7
 592:	08 95       	ret

00000594 <__mulsf3>:
 594:	0e 94 dd 02 	call	0x5ba	; 0x5ba <__mulsf3x>
 598:	0c 94 90 02 	jmp	0x520	; 0x520 <__fp_round>
 59c:	0e 94 82 02 	call	0x504	; 0x504 <__fp_pscA>
 5a0:	38 f0       	brcs	.+14     	; 0x5b0 <__mulsf3+0x1c>
 5a2:	0e 94 89 02 	call	0x512	; 0x512 <__fp_pscB>
 5a6:	20 f0       	brcs	.+8      	; 0x5b0 <__mulsf3+0x1c>
 5a8:	95 23       	and	r25, r21
 5aa:	11 f0       	breq	.+4      	; 0x5b0 <__mulsf3+0x1c>
 5ac:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_inf>
 5b0:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__fp_nan>
 5b4:	11 24       	eor	r1, r1
 5b6:	0c 94 c4 02 	jmp	0x588	; 0x588 <__fp_szero>

000005ba <__mulsf3x>:
 5ba:	0e 94 a1 02 	call	0x542	; 0x542 <__fp_split3>
 5be:	70 f3       	brcs	.-36     	; 0x59c <__mulsf3+0x8>

000005c0 <__mulsf3_pse>:
 5c0:	95 9f       	mul	r25, r21
 5c2:	c1 f3       	breq	.-16     	; 0x5b4 <__mulsf3+0x20>
 5c4:	95 0f       	add	r25, r21
 5c6:	50 e0       	ldi	r21, 0x00	; 0
 5c8:	55 1f       	adc	r21, r21
 5ca:	62 9f       	mul	r22, r18
 5cc:	f0 01       	movw	r30, r0
 5ce:	72 9f       	mul	r23, r18
 5d0:	bb 27       	eor	r27, r27
 5d2:	f0 0d       	add	r31, r0
 5d4:	b1 1d       	adc	r27, r1
 5d6:	63 9f       	mul	r22, r19
 5d8:	aa 27       	eor	r26, r26
 5da:	f0 0d       	add	r31, r0
 5dc:	b1 1d       	adc	r27, r1
 5de:	aa 1f       	adc	r26, r26
 5e0:	64 9f       	mul	r22, r20
 5e2:	66 27       	eor	r22, r22
 5e4:	b0 0d       	add	r27, r0
 5e6:	a1 1d       	adc	r26, r1
 5e8:	66 1f       	adc	r22, r22
 5ea:	82 9f       	mul	r24, r18
 5ec:	22 27       	eor	r18, r18
 5ee:	b0 0d       	add	r27, r0
 5f0:	a1 1d       	adc	r26, r1
 5f2:	62 1f       	adc	r22, r18
 5f4:	73 9f       	mul	r23, r19
 5f6:	b0 0d       	add	r27, r0
 5f8:	a1 1d       	adc	r26, r1
 5fa:	62 1f       	adc	r22, r18
 5fc:	83 9f       	mul	r24, r19
 5fe:	a0 0d       	add	r26, r0
 600:	61 1d       	adc	r22, r1
 602:	22 1f       	adc	r18, r18
 604:	74 9f       	mul	r23, r20
 606:	33 27       	eor	r19, r19
 608:	a0 0d       	add	r26, r0
 60a:	61 1d       	adc	r22, r1
 60c:	23 1f       	adc	r18, r19
 60e:	84 9f       	mul	r24, r20
 610:	60 0d       	add	r22, r0
 612:	21 1d       	adc	r18, r1
 614:	82 2f       	mov	r24, r18
 616:	76 2f       	mov	r23, r22
 618:	6a 2f       	mov	r22, r26
 61a:	11 24       	eor	r1, r1
 61c:	9f 57       	subi	r25, 0x7F	; 127
 61e:	50 40       	sbci	r21, 0x00	; 0
 620:	9a f0       	brmi	.+38     	; 0x648 <__mulsf3_pse+0x88>
 622:	f1 f0       	breq	.+60     	; 0x660 <__mulsf3_pse+0xa0>
 624:	88 23       	and	r24, r24
 626:	4a f0       	brmi	.+18     	; 0x63a <__mulsf3_pse+0x7a>
 628:	ee 0f       	add	r30, r30
 62a:	ff 1f       	adc	r31, r31
 62c:	bb 1f       	adc	r27, r27
 62e:	66 1f       	adc	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	88 1f       	adc	r24, r24
 634:	91 50       	subi	r25, 0x01	; 1
 636:	50 40       	sbci	r21, 0x00	; 0
 638:	a9 f7       	brne	.-22     	; 0x624 <__mulsf3_pse+0x64>
 63a:	9e 3f       	cpi	r25, 0xFE	; 254
 63c:	51 05       	cpc	r21, r1
 63e:	80 f0       	brcs	.+32     	; 0x660 <__mulsf3_pse+0xa0>
 640:	0c 94 79 02 	jmp	0x4f2	; 0x4f2 <__fp_inf>
 644:	0c 94 c4 02 	jmp	0x588	; 0x588 <__fp_szero>
 648:	5f 3f       	cpi	r21, 0xFF	; 255
 64a:	e4 f3       	brlt	.-8      	; 0x644 <__mulsf3_pse+0x84>
 64c:	98 3e       	cpi	r25, 0xE8	; 232
 64e:	d4 f3       	brlt	.-12     	; 0x644 <__mulsf3_pse+0x84>
 650:	86 95       	lsr	r24
 652:	77 95       	ror	r23
 654:	67 95       	ror	r22
 656:	b7 95       	ror	r27
 658:	f7 95       	ror	r31
 65a:	e7 95       	ror	r30
 65c:	9f 5f       	subi	r25, 0xFF	; 255
 65e:	c1 f7       	brne	.-16     	; 0x650 <__mulsf3_pse+0x90>
 660:	fe 2b       	or	r31, r30
 662:	88 0f       	add	r24, r24
 664:	91 1d       	adc	r25, r1
 666:	96 95       	lsr	r25
 668:	87 95       	ror	r24
 66a:	97 f9       	bld	r25, 7
 66c:	08 95       	ret

0000066e <_exit>:
 66e:	f8 94       	cli

00000670 <__stop_program>:
 670:	ff cf       	rjmp	.-2      	; 0x670 <__stop_program>
