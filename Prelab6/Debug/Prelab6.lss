
Prelab6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e2  00800100  00000734  000007c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000734  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  008001e2  008001e2  000008aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a14  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000730  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000434  00000000  00000000  00001ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000418  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000199  00000000  00000000  000023f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000258d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 da 01 	jmp	0x3b4	; 0x3b4 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3e       	cpi	r26, 0xE2	; 226
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 ee       	ldi	r26, 0xE2	; 226
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 3e       	cpi	r26, 0xE5	; 229
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 49 01 	call	0x292	; 0x292 <main>
  9e:	0c 94 98 03 	jmp	0x730	; 0x730 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART>:
    sei(); // Habilitar interrupciones
}

void initUART() {
    // P1: Configurar PD1 (TX) como salida y PD0 (RX) como entrada
    DDRD |= (1 << DDD1); // TX (Salida)
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8a b9       	out	0x0a, r24	; 10
    DDRD &= ~(1 << DDD0); // RX (Entrada)
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	8a b9       	out	0x0a, r24	; 10
    
    // P2: Configurar UCSR0A (Modo normal)
    UCSR0A = 0; 
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
    
    // P3: Habilitar TX, RX e interrupción por RX
    UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0); 
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    
    // P4: Configurar formato: 8 bits, sin paridad, 1 stop bit
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); 
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
    
    // P5: Baud rate a 9600 (@16MHz)
    UBRR0 = 103;
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ce:	08 95       	ret

000000d0 <initADC>:
	writeString("Envie '0' para leer potenciometro o '1' para enviar ascii\n");
	
}

void initADC() {
	ADMUX = (1 << REFS0); // Referencia AVcc
  d0:	80 e4       	ldi	r24, 0x40	; 64
  d2:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC, preescalador 128
  d6:	87 e8       	ldi	r24, 0x87	; 135
  d8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  dc:	08 95       	ret

000000de <setup>:
}

/****************************************/
// NON-Interrupt subroutines
void setup() {
    cli(); // Deshabilitar interrupciones
  de:	f8 94       	cli
    
    // Configurar LEDs:
    DDRB |= 0x1F; // PB0-PB4 como salida (0b00011111)
  e0:	84 b1       	in	r24, 0x04	; 4
  e2:	8f 61       	ori	r24, 0x1F	; 31
  e4:	84 b9       	out	0x04, r24	; 4
    DDRD |= (1 << DDD5) | (1 << DDD6) | (1 << DDD7); // PD5-PD7 como salida
  e6:	8a b1       	in	r24, 0x0a	; 10
  e8:	80 6e       	ori	r24, 0xE0	; 224
  ea:	8a b9       	out	0x0a, r24	; 10
    
    PORTB = 0x00; // LEDs apagados inicialmente
  ec:	15 b8       	out	0x05, r1	; 5
    PORTD &= ~((1 << PORTD5) | (1 << PORTD6) | (1 << PORTD7)); // Apagar PD5-PD7
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	8f 71       	andi	r24, 0x1F	; 31
  f2:	8b b9       	out	0x0b, r24	; 11
    initADC();
  f4:	0e 94 68 00 	call	0xd0	; 0xd0 <initADC>
    initUART(); // Configurar UART
  f8:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART>
    sei(); // Habilitar interrupciones
  fc:	78 94       	sei
  fe:	08 95       	ret

00000100 <leerADC>:
	ADMUX = (1 << REFS0); // Referencia AVcc
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // Habilitar ADC, preescalador 128
}

uint16_t leerADC(uint8_t canal) {
	 ADMUX = (ADMUX & 0xF0) | (canal & 0x0F); // Seleccionar canal
 100:	ec e7       	ldi	r30, 0x7C	; 124
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	8f 70       	andi	r24, 0x0F	; 15
 10a:	89 2b       	or	r24, r25
 10c:	80 83       	st	Z, r24
	 ADCSRA |= (1 << ADSC); // Iniciar conversión
 10e:	ea e7       	ldi	r30, 0x7A	; 122
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	80 64       	ori	r24, 0x40	; 64
 116:	80 83       	st	Z, r24
	 while (ADCSRA & (1 << ADSC));
 118:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
 11c:	86 fd       	sbrc	r24, 6
 11e:	fc cf       	rjmp	.-8      	; 0x118 <leerADC+0x18>
	 return ADC; //
 120:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 124:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

	
}	
 128:	08 95       	ret

0000012a <writeChar>:
void writeChar(char caracter) {
    while ((UCSR0A & (1 << UDRE0)) == 0); // Esperar buffer TX vacío
 12a:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 12e:	95 ff       	sbrs	r25, 5
 130:	fc cf       	rjmp	.-8      	; 0x12a <writeChar>
    UDR0 = caracter; // Enviar carácter
 132:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 136:	08 95       	ret

00000138 <writeString>:
}

void writeString(char*texto){
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; *(texto + i) != '\0'; i++)
 140:	c0 e0       	ldi	r28, 0x00	; 0
 142:	03 c0       	rjmp	.+6      	; 0x14a <writeString+0x12>
	{
		writeChar(*(texto+i));
 144:	0e 94 95 00 	call	0x12a	; 0x12a <writeChar>
    while ((UCSR0A & (1 << UDRE0)) == 0); // Esperar buffer TX vacío
    UDR0 = caracter; // Enviar carácter
}

void writeString(char*texto){
	for (uint8_t i = 0; *(texto + i) != '\0'; i++)
 148:	cf 5f       	subi	r28, 0xFF	; 255
 14a:	f8 01       	movw	r30, r16
 14c:	ec 0f       	add	r30, r28
 14e:	f1 1d       	adc	r31, r1
 150:	80 81       	ld	r24, Z
 152:	81 11       	cpse	r24, r1
 154:	f7 cf       	rjmp	.-18     	; 0x144 <writeString+0xc>
	{
		writeChar(*(texto+i));
	}
	
}
 156:	cf 91       	pop	r28
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	08 95       	ret

0000015e <menu>:
    
    // P5: Baud rate a 9600 (@16MHz)
    UBRR0 = 103;
}
void menu(){
	writeString("\nSistema listo\n");
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
	writeString("Envie '0' para leer potenciometro o '1' para enviar ascii\n");
 166:	80 e1       	ldi	r24, 0x10	; 16
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
 16e:	08 95       	ret

00000170 <enviarNumero>:
		writeChar(*(texto+i));
	}
	
}

void enviarNumero(uint16_t numero) {
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	ec 01       	movw	r28, r24
	if (numero >= 1000) {
 176:	88 3e       	cpi	r24, 0xE8	; 232
 178:	23 e0       	ldi	r18, 0x03	; 3
 17a:	92 07       	cpc	r25, r18
 17c:	a0 f0       	brcs	.+40     	; 0x1a6 <enviarNumero+0x36>
		writeChar('0' + (numero / 1000));
 17e:	9c 01       	movw	r18, r24
 180:	36 95       	lsr	r19
 182:	27 95       	ror	r18
 184:	36 95       	lsr	r19
 186:	27 95       	ror	r18
 188:	36 95       	lsr	r19
 18a:	27 95       	ror	r18
 18c:	a5 ec       	ldi	r26, 0xC5	; 197
 18e:	b0 e2       	ldi	r27, 0x20	; 32
 190:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 194:	92 95       	swap	r25
 196:	82 95       	swap	r24
 198:	8f 70       	andi	r24, 0x0F	; 15
 19a:	89 27       	eor	r24, r25
 19c:	9f 70       	andi	r25, 0x0F	; 15
 19e:	89 27       	eor	r24, r25
 1a0:	80 5d       	subi	r24, 0xD0	; 208
 1a2:	0e 94 95 00 	call	0x12a	; 0x12a <writeChar>
	}
	if (numero >= 100) {
 1a6:	c4 36       	cpi	r28, 0x64	; 100
 1a8:	d1 05       	cpc	r29, r1
 1aa:	48 f1       	brcs	.+82     	; 0x1fe <enviarNumero+0x8e>
		writeChar('0' + ((numero / 100) % 10));
 1ac:	9e 01       	movw	r18, r28
 1ae:	36 95       	lsr	r19
 1b0:	27 95       	ror	r18
 1b2:	36 95       	lsr	r19
 1b4:	27 95       	ror	r18
 1b6:	ab e7       	ldi	r26, 0x7B	; 123
 1b8:	b4 e1       	ldi	r27, 0x14	; 20
 1ba:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 1be:	ac 01       	movw	r20, r24
 1c0:	56 95       	lsr	r21
 1c2:	47 95       	ror	r20
 1c4:	9a 01       	movw	r18, r20
 1c6:	ad ec       	ldi	r26, 0xCD	; 205
 1c8:	bc ec       	ldi	r27, 0xCC	; 204
 1ca:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 1ce:	96 95       	lsr	r25
 1d0:	87 95       	ror	r24
 1d2:	96 95       	lsr	r25
 1d4:	87 95       	ror	r24
 1d6:	96 95       	lsr	r25
 1d8:	87 95       	ror	r24
 1da:	9c 01       	movw	r18, r24
 1dc:	22 0f       	add	r18, r18
 1de:	33 1f       	adc	r19, r19
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	88 0f       	add	r24, r24
 1e6:	99 1f       	adc	r25, r25
 1e8:	88 0f       	add	r24, r24
 1ea:	99 1f       	adc	r25, r25
 1ec:	82 0f       	add	r24, r18
 1ee:	93 1f       	adc	r25, r19
 1f0:	9a 01       	movw	r18, r20
 1f2:	28 1b       	sub	r18, r24
 1f4:	39 0b       	sbc	r19, r25
 1f6:	c9 01       	movw	r24, r18
 1f8:	80 5d       	subi	r24, 0xD0	; 208
 1fa:	0e 94 95 00 	call	0x12a	; 0x12a <writeChar>
	}
	if (numero >= 10) {
 1fe:	ca 30       	cpi	r28, 0x0A	; 10
 200:	d1 05       	cpc	r29, r1
 202:	38 f1       	brcs	.+78     	; 0x252 <enviarNumero+0xe2>
		writeChar('0' + ((numero / 10) % 10));
 204:	9e 01       	movw	r18, r28
 206:	ad ec       	ldi	r26, 0xCD	; 205
 208:	bc ec       	ldi	r27, 0xCC	; 204
 20a:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 20e:	ac 01       	movw	r20, r24
 210:	56 95       	lsr	r21
 212:	47 95       	ror	r20
 214:	56 95       	lsr	r21
 216:	47 95       	ror	r20
 218:	56 95       	lsr	r21
 21a:	47 95       	ror	r20
 21c:	9a 01       	movw	r18, r20
 21e:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 222:	96 95       	lsr	r25
 224:	87 95       	ror	r24
 226:	96 95       	lsr	r25
 228:	87 95       	ror	r24
 22a:	96 95       	lsr	r25
 22c:	87 95       	ror	r24
 22e:	9c 01       	movw	r18, r24
 230:	22 0f       	add	r18, r18
 232:	33 1f       	adc	r19, r19
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	88 0f       	add	r24, r24
 23e:	99 1f       	adc	r25, r25
 240:	82 0f       	add	r24, r18
 242:	93 1f       	adc	r25, r19
 244:	9a 01       	movw	r18, r20
 246:	28 1b       	sub	r18, r24
 248:	39 0b       	sbc	r19, r25
 24a:	c9 01       	movw	r24, r18
 24c:	80 5d       	subi	r24, 0xD0	; 208
 24e:	0e 94 95 00 	call	0x12a	; 0x12a <writeChar>
	}
	writeChar('0' + (numero % 10));
 252:	9e 01       	movw	r18, r28
 254:	ad ec       	ldi	r26, 0xCD	; 205
 256:	bc ec       	ldi	r27, 0xCC	; 204
 258:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 25c:	96 95       	lsr	r25
 25e:	87 95       	ror	r24
 260:	96 95       	lsr	r25
 262:	87 95       	ror	r24
 264:	96 95       	lsr	r25
 266:	87 95       	ror	r24
 268:	9c 01       	movw	r18, r24
 26a:	22 0f       	add	r18, r18
 26c:	33 1f       	adc	r19, r19
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	88 0f       	add	r24, r24
 278:	99 1f       	adc	r25, r25
 27a:	82 0f       	add	r24, r18
 27c:	93 1f       	adc	r25, r19
 27e:	9e 01       	movw	r18, r28
 280:	28 1b       	sub	r18, r24
 282:	39 0b       	sbc	r19, r25
 284:	c9 01       	movw	r24, r18
 286:	80 5d       	subi	r24, 0xD0	; 208
 288:	0e 94 95 00 	call	0x12a	; 0x12a <writeChar>
}
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <main>:
volatile uint8_t modo_asqi = 0;

/****************************************/
// Main Function
int main(void) {
    setup(); 
 292:	0e 94 6f 00 	call	0xde	; 0xde <setup>
    //writeChar('B'); // Mensaje inicial
	//writeString("Bienvenidos a la cripta");
	
// MENU:
    menu();
 296:	0e 94 af 00 	call	0x15e	; 0x15e <menu>
    while (1) {
	
	if(new_data){
 29a:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <new_data>
 29e:	88 23       	and	r24, r24
 2a0:	e1 f3       	breq	.-8      	; 0x29a <main+0x8>
	new_data = 0;
 2a2:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <new_data>
	
//modo menu
	if(modo_asqi==0){
 2a6:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
 2aa:	81 11       	cpse	r24, r1
 2ac:	59 c0       	rjmp	.+178    	; 0x360 <main+0xce>
		// Modo POTENCIOMETRO
		if (received_char == '0') { 
 2ae:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <received_char>
 2b2:	80 33       	cpi	r24, 0x30	; 48
 2b4:	e1 f5       	brne	.+120    	; 0x32e <main+0x9c>
			writeString("Modo Potenciometro\n");
 2b6:	8b e4       	ldi	r24, 0x4B	; 75
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
			uint16_t lectura = leerADC(0);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 80 00 	call	0x100	; 0x100 <leerADC>
 2c4:	ec 01       	movw	r28, r24
			writeString("ADC0 (10 bits): ");
 2c6:	8f e5       	ldi	r24, 0x5F	; 95
 2c8:	91 e0       	ldi	r25, 0x01	; 1
 2ca:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
			enviarNumero(lectura);  // debe ir de 0 a 1023
 2ce:	ce 01       	movw	r24, r28
 2d0:	0e 94 b8 00 	call	0x170	; 0x170 <enviarNumero>
			uint8_t valor = (uint8_t)(lectura * 255.0 / 1023.0);  // Convertir a 8 bits
 2d4:	be 01       	movw	r22, r28
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 8e 02 	call	0x51c	; 0x51c <__floatunsisf>
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	4f e7       	ldi	r20, 0x7F	; 127
 2e4:	53 e4       	ldi	r21, 0x43	; 67
 2e6:	0e 94 1c 03 	call	0x638	; 0x638 <__mulsf3>
 2ea:	20 e0       	ldi	r18, 0x00	; 0
 2ec:	30 ec       	ldi	r19, 0xC0	; 192
 2ee:	4f e7       	ldi	r20, 0x7F	; 127
 2f0:	54 e4       	ldi	r21, 0x44	; 68
 2f2:	0e 94 ed 01 	call	0x3da	; 0x3da <__divsf3>
 2f6:	0e 94 5f 02 	call	0x4be	; 0x4be <__fixunssfsi>
 2fa:	c6 2f       	mov	r28, r22
			//uint8_t valor = lectura;
			 // Mostrar en LEDs con sus máscaras
			 PORTB = valor & 0x1F; // bits 0-4 a PORTB
 2fc:	86 2f       	mov	r24, r22
 2fe:	8f 71       	andi	r24, 0x1F	; 31
 300:	85 b9       	out	0x05, r24	; 5
			 PORTD = (PORTD & 0x1F) | (valor & 0xE0); // bits 5-7 a PD5-PD7
 302:	8b b1       	in	r24, 0x0b	; 11
 304:	98 2f       	mov	r25, r24
 306:	9f 71       	andi	r25, 0x1F	; 31
 308:	8c 2f       	mov	r24, r28
 30a:	80 7e       	andi	r24, 0xE0	; 224
 30c:	89 2b       	or	r24, r25
 30e:	8b b9       	out	0x0b, r24	; 11
			writeString(" -> 8 bits: ");
 310:	80 e7       	ldi	r24, 0x70	; 112
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
			
			enviarNumero(valor);
 318:	8c 2f       	mov	r24, r28
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 b8 00 	call	0x170	; 0x170 <enviarNumero>
			writeString("\n");
 320:	8a ec       	ldi	r24, 0xCA	; 202
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
			  

			 menu();		
 328:	0e 94 af 00 	call	0x15e	; 0x15e <menu>
 32c:	b6 cf       	rjmp	.-148    	; 0x29a <main+0x8>
		}
		// menu ascii
		else if (received_char == '1') {  
 32e:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <received_char>
 332:	81 33       	cpi	r24, 0x31	; 49
 334:	71 f4       	brne	.+28     	; 0x352 <main+0xc0>
			writeString("Modo ascii\n");
 336:	8d e7       	ldi	r24, 0x7D	; 125
 338:	91 e0       	ldi	r25, 0x01	; 1
 33a:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
			writeString("\nIngrese un caracter para hacerlo ASCII: ");
 33e:	89 e8       	ldi	r24, 0x89	; 137
 340:	91 e0       	ldi	r25, 0x01	; 1
 342:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
			modo_asqi=1;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <__data_end>
			new_data = 0; //ESPERAMOS A QUE NOS MANDEN ALGO NUEVO
 34c:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <new_data>
 350:	a4 cf       	rjmp	.-184    	; 0x29a <main+0x8>
		}
		else{	//una opcion valida
			writeString("INSERTAR OPCION VALIDA.\n");
 352:	83 eb       	ldi	r24, 0xB3	; 179
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
			menu();
 35a:	0e 94 af 00 	call	0x15e	; 0x15e <menu>
 35e:	9d cf       	rjmp	.-198    	; 0x29a <main+0x8>
		}
	}
	//Modo Ascii
	else if (modo_asqi == 1){ 
 360:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <__data_end>
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	09 f0       	breq	.+2      	; 0x36a <main+0xd8>
 368:	98 cf       	rjmp	.-208    	; 0x29a <main+0x8>
		 PORTB = received_char & 0x1F; 
 36a:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <received_char>
 36e:	8f 71       	andi	r24, 0x1F	; 31
 370:	85 b9       	out	0x05, r24	; 5
		 PORTD = (PORTD & 0x1F) | ((received_char & 0xE0) >> 3); 
 372:	2b b1       	in	r18, 0x0b	; 11
 374:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <received_char>
 378:	90 7e       	andi	r25, 0xE0	; 224
 37a:	89 2f       	mov	r24, r25
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	95 95       	asr	r25
 380:	87 95       	ror	r24
 382:	95 95       	asr	r25
 384:	87 95       	ror	r24
 386:	95 95       	asr	r25
 388:	87 95       	ror	r24
 38a:	92 2f       	mov	r25, r18
 38c:	9f 71       	andi	r25, 0x1F	; 31
 38e:	89 2b       	or	r24, r25
 390:	8b b9       	out	0x0b, r24	; 11
		  writeString("\nCaracter recibido: ");
 392:	8c ec       	ldi	r24, 0xCC	; 204
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
		  writeChar(received_char);
 39a:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <received_char>
 39e:	0e 94 95 00 	call	0x12a	; 0x12a <writeChar>
		  writeString("\n");
 3a2:	8a ec       	ldi	r24, 0xCA	; 202
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 9c 00 	call	0x138	; 0x138 <writeString>
		  
		  modo_asqi = 0; // Volver al menú
 3aa:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <__data_end>
		  menu();
 3ae:	0e 94 af 00 	call	0x15e	; 0x15e <menu>
 3b2:	73 cf       	rjmp	.-282    	; 0x29a <main+0x8>

000003b4 <__vector_18>:
	}
	writeChar('0' + (numero % 10));
}
/****************************************/
// Interrupt routines
ISR(USART_RX_vect) {
 3b4:	1f 92       	push	r1
 3b6:	0f 92       	push	r0
 3b8:	0f b6       	in	r0, 0x3f	; 63
 3ba:	0f 92       	push	r0
 3bc:	11 24       	eor	r1, r1
 3be:	8f 93       	push	r24
    received_char = UDR0; // Leer carácter recibido
 3c0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 3c4:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <received_char>
    new_data = 1;
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <new_data>
   // PORTB = (received_char & 0x1F); // Bits 0-4 en PB0-PB4
   // PORTD = (PORTD & 0x1F) | ((received_char & 0xE0) >> 2); // Bits 5-7 en PD5-PD7
    
    // Opcional: Eco en terminal
   // writeChar(received_char); 
 3ce:	8f 91       	pop	r24
 3d0:	0f 90       	pop	r0
 3d2:	0f be       	out	0x3f, r0	; 63
 3d4:	0f 90       	pop	r0
 3d6:	1f 90       	pop	r1
 3d8:	18 95       	reti

000003da <__divsf3>:
 3da:	0e 94 01 02 	call	0x402	; 0x402 <__divsf3x>
 3de:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__fp_round>
 3e2:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__fp_pscB>
 3e6:	58 f0       	brcs	.+22     	; 0x3fe <__divsf3+0x24>
 3e8:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__fp_pscA>
 3ec:	40 f0       	brcs	.+16     	; 0x3fe <__divsf3+0x24>
 3ee:	29 f4       	brne	.+10     	; 0x3fa <__divsf3+0x20>
 3f0:	5f 3f       	cpi	r21, 0xFF	; 255
 3f2:	29 f0       	breq	.+10     	; 0x3fe <__divsf3+0x24>
 3f4:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_inf>
 3f8:	51 11       	cpse	r21, r1
 3fa:	0c 94 16 03 	jmp	0x62c	; 0x62c <__fp_szero>
 3fe:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_nan>

00000402 <__divsf3x>:
 402:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__fp_split3>
 406:	68 f3       	brcs	.-38     	; 0x3e2 <__divsf3+0x8>

00000408 <__divsf3_pse>:
 408:	99 23       	and	r25, r25
 40a:	b1 f3       	breq	.-20     	; 0x3f8 <__divsf3+0x1e>
 40c:	55 23       	and	r21, r21
 40e:	91 f3       	breq	.-28     	; 0x3f4 <__divsf3+0x1a>
 410:	95 1b       	sub	r25, r21
 412:	55 0b       	sbc	r21, r21
 414:	bb 27       	eor	r27, r27
 416:	aa 27       	eor	r26, r26
 418:	62 17       	cp	r22, r18
 41a:	73 07       	cpc	r23, r19
 41c:	84 07       	cpc	r24, r20
 41e:	38 f0       	brcs	.+14     	; 0x42e <__divsf3_pse+0x26>
 420:	9f 5f       	subi	r25, 0xFF	; 255
 422:	5f 4f       	sbci	r21, 0xFF	; 255
 424:	22 0f       	add	r18, r18
 426:	33 1f       	adc	r19, r19
 428:	44 1f       	adc	r20, r20
 42a:	aa 1f       	adc	r26, r26
 42c:	a9 f3       	breq	.-22     	; 0x418 <__divsf3_pse+0x10>
 42e:	35 d0       	rcall	.+106    	; 0x49a <__divsf3_pse+0x92>
 430:	0e 2e       	mov	r0, r30
 432:	3a f0       	brmi	.+14     	; 0x442 <__divsf3_pse+0x3a>
 434:	e0 e8       	ldi	r30, 0x80	; 128
 436:	32 d0       	rcall	.+100    	; 0x49c <__divsf3_pse+0x94>
 438:	91 50       	subi	r25, 0x01	; 1
 43a:	50 40       	sbci	r21, 0x00	; 0
 43c:	e6 95       	lsr	r30
 43e:	00 1c       	adc	r0, r0
 440:	ca f7       	brpl	.-14     	; 0x434 <__divsf3_pse+0x2c>
 442:	2b d0       	rcall	.+86     	; 0x49a <__divsf3_pse+0x92>
 444:	fe 2f       	mov	r31, r30
 446:	29 d0       	rcall	.+82     	; 0x49a <__divsf3_pse+0x92>
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	88 1f       	adc	r24, r24
 44e:	bb 1f       	adc	r27, r27
 450:	26 17       	cp	r18, r22
 452:	37 07       	cpc	r19, r23
 454:	48 07       	cpc	r20, r24
 456:	ab 07       	cpc	r26, r27
 458:	b0 e8       	ldi	r27, 0x80	; 128
 45a:	09 f0       	breq	.+2      	; 0x45e <__divsf3_pse+0x56>
 45c:	bb 0b       	sbc	r27, r27
 45e:	80 2d       	mov	r24, r0
 460:	bf 01       	movw	r22, r30
 462:	ff 27       	eor	r31, r31
 464:	93 58       	subi	r25, 0x83	; 131
 466:	5f 4f       	sbci	r21, 0xFF	; 255
 468:	3a f0       	brmi	.+14     	; 0x478 <__divsf3_pse+0x70>
 46a:	9e 3f       	cpi	r25, 0xFE	; 254
 46c:	51 05       	cpc	r21, r1
 46e:	78 f0       	brcs	.+30     	; 0x48e <__divsf3_pse+0x86>
 470:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_inf>
 474:	0c 94 16 03 	jmp	0x62c	; 0x62c <__fp_szero>
 478:	5f 3f       	cpi	r21, 0xFF	; 255
 47a:	e4 f3       	brlt	.-8      	; 0x474 <__divsf3_pse+0x6c>
 47c:	98 3e       	cpi	r25, 0xE8	; 232
 47e:	d4 f3       	brlt	.-12     	; 0x474 <__divsf3_pse+0x6c>
 480:	86 95       	lsr	r24
 482:	77 95       	ror	r23
 484:	67 95       	ror	r22
 486:	b7 95       	ror	r27
 488:	f7 95       	ror	r31
 48a:	9f 5f       	subi	r25, 0xFF	; 255
 48c:	c9 f7       	brne	.-14     	; 0x480 <__divsf3_pse+0x78>
 48e:	88 0f       	add	r24, r24
 490:	91 1d       	adc	r25, r1
 492:	96 95       	lsr	r25
 494:	87 95       	ror	r24
 496:	97 f9       	bld	r25, 7
 498:	08 95       	ret
 49a:	e1 e0       	ldi	r30, 0x01	; 1
 49c:	66 0f       	add	r22, r22
 49e:	77 1f       	adc	r23, r23
 4a0:	88 1f       	adc	r24, r24
 4a2:	bb 1f       	adc	r27, r27
 4a4:	62 17       	cp	r22, r18
 4a6:	73 07       	cpc	r23, r19
 4a8:	84 07       	cpc	r24, r20
 4aa:	ba 07       	cpc	r27, r26
 4ac:	20 f0       	brcs	.+8      	; 0x4b6 <__divsf3_pse+0xae>
 4ae:	62 1b       	sub	r22, r18
 4b0:	73 0b       	sbc	r23, r19
 4b2:	84 0b       	sbc	r24, r20
 4b4:	ba 0b       	sbc	r27, r26
 4b6:	ee 1f       	adc	r30, r30
 4b8:	88 f7       	brcc	.-30     	; 0x49c <__divsf3_pse+0x94>
 4ba:	e0 95       	com	r30
 4bc:	08 95       	ret

000004be <__fixunssfsi>:
 4be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <__fp_splitA>
 4c2:	88 f0       	brcs	.+34     	; 0x4e6 <__fixunssfsi+0x28>
 4c4:	9f 57       	subi	r25, 0x7F	; 127
 4c6:	98 f0       	brcs	.+38     	; 0x4ee <__fixunssfsi+0x30>
 4c8:	b9 2f       	mov	r27, r25
 4ca:	99 27       	eor	r25, r25
 4cc:	b7 51       	subi	r27, 0x17	; 23
 4ce:	b0 f0       	brcs	.+44     	; 0x4fc <__fixunssfsi+0x3e>
 4d0:	e1 f0       	breq	.+56     	; 0x50a <__fixunssfsi+0x4c>
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	88 1f       	adc	r24, r24
 4d8:	99 1f       	adc	r25, r25
 4da:	1a f0       	brmi	.+6      	; 0x4e2 <__fixunssfsi+0x24>
 4dc:	ba 95       	dec	r27
 4de:	c9 f7       	brne	.-14     	; 0x4d2 <__fixunssfsi+0x14>
 4e0:	14 c0       	rjmp	.+40     	; 0x50a <__fixunssfsi+0x4c>
 4e2:	b1 30       	cpi	r27, 0x01	; 1
 4e4:	91 f0       	breq	.+36     	; 0x50a <__fixunssfsi+0x4c>
 4e6:	0e 94 15 03 	call	0x62a	; 0x62a <__fp_zero>
 4ea:	b1 e0       	ldi	r27, 0x01	; 1
 4ec:	08 95       	ret
 4ee:	0c 94 15 03 	jmp	0x62a	; 0x62a <__fp_zero>
 4f2:	67 2f       	mov	r22, r23
 4f4:	78 2f       	mov	r23, r24
 4f6:	88 27       	eor	r24, r24
 4f8:	b8 5f       	subi	r27, 0xF8	; 248
 4fa:	39 f0       	breq	.+14     	; 0x50a <__fixunssfsi+0x4c>
 4fc:	b9 3f       	cpi	r27, 0xF9	; 249
 4fe:	cc f3       	brlt	.-14     	; 0x4f2 <__fixunssfsi+0x34>
 500:	86 95       	lsr	r24
 502:	77 95       	ror	r23
 504:	67 95       	ror	r22
 506:	b3 95       	inc	r27
 508:	d9 f7       	brne	.-10     	; 0x500 <__fixunssfsi+0x42>
 50a:	3e f4       	brtc	.+14     	; 0x51a <__fixunssfsi+0x5c>
 50c:	90 95       	com	r25
 50e:	80 95       	com	r24
 510:	70 95       	com	r23
 512:	61 95       	neg	r22
 514:	7f 4f       	sbci	r23, 0xFF	; 255
 516:	8f 4f       	sbci	r24, 0xFF	; 255
 518:	9f 4f       	sbci	r25, 0xFF	; 255
 51a:	08 95       	ret

0000051c <__floatunsisf>:
 51c:	e8 94       	clt
 51e:	09 c0       	rjmp	.+18     	; 0x532 <__floatsisf+0x12>

00000520 <__floatsisf>:
 520:	97 fb       	bst	r25, 7
 522:	3e f4       	brtc	.+14     	; 0x532 <__floatsisf+0x12>
 524:	90 95       	com	r25
 526:	80 95       	com	r24
 528:	70 95       	com	r23
 52a:	61 95       	neg	r22
 52c:	7f 4f       	sbci	r23, 0xFF	; 255
 52e:	8f 4f       	sbci	r24, 0xFF	; 255
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	99 23       	and	r25, r25
 534:	a9 f0       	breq	.+42     	; 0x560 <__floatsisf+0x40>
 536:	f9 2f       	mov	r31, r25
 538:	96 e9       	ldi	r25, 0x96	; 150
 53a:	bb 27       	eor	r27, r27
 53c:	93 95       	inc	r25
 53e:	f6 95       	lsr	r31
 540:	87 95       	ror	r24
 542:	77 95       	ror	r23
 544:	67 95       	ror	r22
 546:	b7 95       	ror	r27
 548:	f1 11       	cpse	r31, r1
 54a:	f8 cf       	rjmp	.-16     	; 0x53c <__floatsisf+0x1c>
 54c:	fa f4       	brpl	.+62     	; 0x58c <__floatsisf+0x6c>
 54e:	bb 0f       	add	r27, r27
 550:	11 f4       	brne	.+4      	; 0x556 <__floatsisf+0x36>
 552:	60 ff       	sbrs	r22, 0
 554:	1b c0       	rjmp	.+54     	; 0x58c <__floatsisf+0x6c>
 556:	6f 5f       	subi	r22, 0xFF	; 255
 558:	7f 4f       	sbci	r23, 0xFF	; 255
 55a:	8f 4f       	sbci	r24, 0xFF	; 255
 55c:	9f 4f       	sbci	r25, 0xFF	; 255
 55e:	16 c0       	rjmp	.+44     	; 0x58c <__floatsisf+0x6c>
 560:	88 23       	and	r24, r24
 562:	11 f0       	breq	.+4      	; 0x568 <__floatsisf+0x48>
 564:	96 e9       	ldi	r25, 0x96	; 150
 566:	11 c0       	rjmp	.+34     	; 0x58a <__floatsisf+0x6a>
 568:	77 23       	and	r23, r23
 56a:	21 f0       	breq	.+8      	; 0x574 <__floatsisf+0x54>
 56c:	9e e8       	ldi	r25, 0x8E	; 142
 56e:	87 2f       	mov	r24, r23
 570:	76 2f       	mov	r23, r22
 572:	05 c0       	rjmp	.+10     	; 0x57e <__floatsisf+0x5e>
 574:	66 23       	and	r22, r22
 576:	71 f0       	breq	.+28     	; 0x594 <__floatsisf+0x74>
 578:	96 e8       	ldi	r25, 0x86	; 134
 57a:	86 2f       	mov	r24, r22
 57c:	70 e0       	ldi	r23, 0x00	; 0
 57e:	60 e0       	ldi	r22, 0x00	; 0
 580:	2a f0       	brmi	.+10     	; 0x58c <__floatsisf+0x6c>
 582:	9a 95       	dec	r25
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	88 1f       	adc	r24, r24
 58a:	da f7       	brpl	.-10     	; 0x582 <__floatsisf+0x62>
 58c:	88 0f       	add	r24, r24
 58e:	96 95       	lsr	r25
 590:	87 95       	ror	r24
 592:	97 f9       	bld	r25, 7
 594:	08 95       	ret

00000596 <__fp_inf>:
 596:	97 f9       	bld	r25, 7
 598:	9f 67       	ori	r25, 0x7F	; 127
 59a:	80 e8       	ldi	r24, 0x80	; 128
 59c:	70 e0       	ldi	r23, 0x00	; 0
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	08 95       	ret

000005a2 <__fp_nan>:
 5a2:	9f ef       	ldi	r25, 0xFF	; 255
 5a4:	80 ec       	ldi	r24, 0xC0	; 192
 5a6:	08 95       	ret

000005a8 <__fp_pscA>:
 5a8:	00 24       	eor	r0, r0
 5aa:	0a 94       	dec	r0
 5ac:	16 16       	cp	r1, r22
 5ae:	17 06       	cpc	r1, r23
 5b0:	18 06       	cpc	r1, r24
 5b2:	09 06       	cpc	r0, r25
 5b4:	08 95       	ret

000005b6 <__fp_pscB>:
 5b6:	00 24       	eor	r0, r0
 5b8:	0a 94       	dec	r0
 5ba:	12 16       	cp	r1, r18
 5bc:	13 06       	cpc	r1, r19
 5be:	14 06       	cpc	r1, r20
 5c0:	05 06       	cpc	r0, r21
 5c2:	08 95       	ret

000005c4 <__fp_round>:
 5c4:	09 2e       	mov	r0, r25
 5c6:	03 94       	inc	r0
 5c8:	00 0c       	add	r0, r0
 5ca:	11 f4       	brne	.+4      	; 0x5d0 <__fp_round+0xc>
 5cc:	88 23       	and	r24, r24
 5ce:	52 f0       	brmi	.+20     	; 0x5e4 <__fp_round+0x20>
 5d0:	bb 0f       	add	r27, r27
 5d2:	40 f4       	brcc	.+16     	; 0x5e4 <__fp_round+0x20>
 5d4:	bf 2b       	or	r27, r31
 5d6:	11 f4       	brne	.+4      	; 0x5dc <__fp_round+0x18>
 5d8:	60 ff       	sbrs	r22, 0
 5da:	04 c0       	rjmp	.+8      	; 0x5e4 <__fp_round+0x20>
 5dc:	6f 5f       	subi	r22, 0xFF	; 255
 5de:	7f 4f       	sbci	r23, 0xFF	; 255
 5e0:	8f 4f       	sbci	r24, 0xFF	; 255
 5e2:	9f 4f       	sbci	r25, 0xFF	; 255
 5e4:	08 95       	ret

000005e6 <__fp_split3>:
 5e6:	57 fd       	sbrc	r21, 7
 5e8:	90 58       	subi	r25, 0x80	; 128
 5ea:	44 0f       	add	r20, r20
 5ec:	55 1f       	adc	r21, r21
 5ee:	59 f0       	breq	.+22     	; 0x606 <__fp_splitA+0x10>
 5f0:	5f 3f       	cpi	r21, 0xFF	; 255
 5f2:	71 f0       	breq	.+28     	; 0x610 <__fp_splitA+0x1a>
 5f4:	47 95       	ror	r20

000005f6 <__fp_splitA>:
 5f6:	88 0f       	add	r24, r24
 5f8:	97 fb       	bst	r25, 7
 5fa:	99 1f       	adc	r25, r25
 5fc:	61 f0       	breq	.+24     	; 0x616 <__fp_splitA+0x20>
 5fe:	9f 3f       	cpi	r25, 0xFF	; 255
 600:	79 f0       	breq	.+30     	; 0x620 <__fp_splitA+0x2a>
 602:	87 95       	ror	r24
 604:	08 95       	ret
 606:	12 16       	cp	r1, r18
 608:	13 06       	cpc	r1, r19
 60a:	14 06       	cpc	r1, r20
 60c:	55 1f       	adc	r21, r21
 60e:	f2 cf       	rjmp	.-28     	; 0x5f4 <__fp_split3+0xe>
 610:	46 95       	lsr	r20
 612:	f1 df       	rcall	.-30     	; 0x5f6 <__fp_splitA>
 614:	08 c0       	rjmp	.+16     	; 0x626 <__fp_splitA+0x30>
 616:	16 16       	cp	r1, r22
 618:	17 06       	cpc	r1, r23
 61a:	18 06       	cpc	r1, r24
 61c:	99 1f       	adc	r25, r25
 61e:	f1 cf       	rjmp	.-30     	; 0x602 <__fp_splitA+0xc>
 620:	86 95       	lsr	r24
 622:	71 05       	cpc	r23, r1
 624:	61 05       	cpc	r22, r1
 626:	08 94       	sec
 628:	08 95       	ret

0000062a <__fp_zero>:
 62a:	e8 94       	clt

0000062c <__fp_szero>:
 62c:	bb 27       	eor	r27, r27
 62e:	66 27       	eor	r22, r22
 630:	77 27       	eor	r23, r23
 632:	cb 01       	movw	r24, r22
 634:	97 f9       	bld	r25, 7
 636:	08 95       	ret

00000638 <__mulsf3>:
 638:	0e 94 2f 03 	call	0x65e	; 0x65e <__mulsf3x>
 63c:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__fp_round>
 640:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <__fp_pscA>
 644:	38 f0       	brcs	.+14     	; 0x654 <__mulsf3+0x1c>
 646:	0e 94 db 02 	call	0x5b6	; 0x5b6 <__fp_pscB>
 64a:	20 f0       	brcs	.+8      	; 0x654 <__mulsf3+0x1c>
 64c:	95 23       	and	r25, r21
 64e:	11 f0       	breq	.+4      	; 0x654 <__mulsf3+0x1c>
 650:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_inf>
 654:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__fp_nan>
 658:	11 24       	eor	r1, r1
 65a:	0c 94 16 03 	jmp	0x62c	; 0x62c <__fp_szero>

0000065e <__mulsf3x>:
 65e:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__fp_split3>
 662:	70 f3       	brcs	.-36     	; 0x640 <__mulsf3+0x8>

00000664 <__mulsf3_pse>:
 664:	95 9f       	mul	r25, r21
 666:	c1 f3       	breq	.-16     	; 0x658 <__mulsf3+0x20>
 668:	95 0f       	add	r25, r21
 66a:	50 e0       	ldi	r21, 0x00	; 0
 66c:	55 1f       	adc	r21, r21
 66e:	62 9f       	mul	r22, r18
 670:	f0 01       	movw	r30, r0
 672:	72 9f       	mul	r23, r18
 674:	bb 27       	eor	r27, r27
 676:	f0 0d       	add	r31, r0
 678:	b1 1d       	adc	r27, r1
 67a:	63 9f       	mul	r22, r19
 67c:	aa 27       	eor	r26, r26
 67e:	f0 0d       	add	r31, r0
 680:	b1 1d       	adc	r27, r1
 682:	aa 1f       	adc	r26, r26
 684:	64 9f       	mul	r22, r20
 686:	66 27       	eor	r22, r22
 688:	b0 0d       	add	r27, r0
 68a:	a1 1d       	adc	r26, r1
 68c:	66 1f       	adc	r22, r22
 68e:	82 9f       	mul	r24, r18
 690:	22 27       	eor	r18, r18
 692:	b0 0d       	add	r27, r0
 694:	a1 1d       	adc	r26, r1
 696:	62 1f       	adc	r22, r18
 698:	73 9f       	mul	r23, r19
 69a:	b0 0d       	add	r27, r0
 69c:	a1 1d       	adc	r26, r1
 69e:	62 1f       	adc	r22, r18
 6a0:	83 9f       	mul	r24, r19
 6a2:	a0 0d       	add	r26, r0
 6a4:	61 1d       	adc	r22, r1
 6a6:	22 1f       	adc	r18, r18
 6a8:	74 9f       	mul	r23, r20
 6aa:	33 27       	eor	r19, r19
 6ac:	a0 0d       	add	r26, r0
 6ae:	61 1d       	adc	r22, r1
 6b0:	23 1f       	adc	r18, r19
 6b2:	84 9f       	mul	r24, r20
 6b4:	60 0d       	add	r22, r0
 6b6:	21 1d       	adc	r18, r1
 6b8:	82 2f       	mov	r24, r18
 6ba:	76 2f       	mov	r23, r22
 6bc:	6a 2f       	mov	r22, r26
 6be:	11 24       	eor	r1, r1
 6c0:	9f 57       	subi	r25, 0x7F	; 127
 6c2:	50 40       	sbci	r21, 0x00	; 0
 6c4:	9a f0       	brmi	.+38     	; 0x6ec <__mulsf3_pse+0x88>
 6c6:	f1 f0       	breq	.+60     	; 0x704 <__mulsf3_pse+0xa0>
 6c8:	88 23       	and	r24, r24
 6ca:	4a f0       	brmi	.+18     	; 0x6de <__mulsf3_pse+0x7a>
 6cc:	ee 0f       	add	r30, r30
 6ce:	ff 1f       	adc	r31, r31
 6d0:	bb 1f       	adc	r27, r27
 6d2:	66 1f       	adc	r22, r22
 6d4:	77 1f       	adc	r23, r23
 6d6:	88 1f       	adc	r24, r24
 6d8:	91 50       	subi	r25, 0x01	; 1
 6da:	50 40       	sbci	r21, 0x00	; 0
 6dc:	a9 f7       	brne	.-22     	; 0x6c8 <__mulsf3_pse+0x64>
 6de:	9e 3f       	cpi	r25, 0xFE	; 254
 6e0:	51 05       	cpc	r21, r1
 6e2:	80 f0       	brcs	.+32     	; 0x704 <__mulsf3_pse+0xa0>
 6e4:	0c 94 cb 02 	jmp	0x596	; 0x596 <__fp_inf>
 6e8:	0c 94 16 03 	jmp	0x62c	; 0x62c <__fp_szero>
 6ec:	5f 3f       	cpi	r21, 0xFF	; 255
 6ee:	e4 f3       	brlt	.-8      	; 0x6e8 <__mulsf3_pse+0x84>
 6f0:	98 3e       	cpi	r25, 0xE8	; 232
 6f2:	d4 f3       	brlt	.-12     	; 0x6e8 <__mulsf3_pse+0x84>
 6f4:	86 95       	lsr	r24
 6f6:	77 95       	ror	r23
 6f8:	67 95       	ror	r22
 6fa:	b7 95       	ror	r27
 6fc:	f7 95       	ror	r31
 6fe:	e7 95       	ror	r30
 700:	9f 5f       	subi	r25, 0xFF	; 255
 702:	c1 f7       	brne	.-16     	; 0x6f4 <__mulsf3_pse+0x90>
 704:	fe 2b       	or	r31, r30
 706:	88 0f       	add	r24, r24
 708:	91 1d       	adc	r25, r1
 70a:	96 95       	lsr	r25
 70c:	87 95       	ror	r24
 70e:	97 f9       	bld	r25, 7
 710:	08 95       	ret

00000712 <__umulhisi3>:
 712:	a2 9f       	mul	r26, r18
 714:	b0 01       	movw	r22, r0
 716:	b3 9f       	mul	r27, r19
 718:	c0 01       	movw	r24, r0
 71a:	a3 9f       	mul	r26, r19
 71c:	70 0d       	add	r23, r0
 71e:	81 1d       	adc	r24, r1
 720:	11 24       	eor	r1, r1
 722:	91 1d       	adc	r25, r1
 724:	b2 9f       	mul	r27, r18
 726:	70 0d       	add	r23, r0
 728:	81 1d       	adc	r24, r1
 72a:	11 24       	eor	r1, r1
 72c:	91 1d       	adc	r25, r1
 72e:	08 95       	ret

00000730 <_exit>:
 730:	f8 94       	cli

00000732 <__stop_program>:
 732:	ff cf       	rjmp	.-2      	; 0x732 <__stop_program>
