
Preclase.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  000001e0  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800170  00800170  000002e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d7  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000774  00000000  00000000  00000c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039f  00000000  00000000  000013e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  00001788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000041d  00000000  00000000  0000181c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000115  00000000  00000000  00001c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00001d4e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ee       	ldi	r30, 0xE0	; 224
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 37       	cpi	r26, 0x70	; 112
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e7       	ldi	r26, 0x70	; 112
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 37       	cpi	r26, 0x72	; 114
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 93 00 	call	0x126	; 0x126 <main>
  9e:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initUART>:
	
	sei(); // Habilitar interrupciones
}

void initUART() {
	DDRD |= (1 << DDD1); // TX como salida
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8a b9       	out	0x0a, r24	; 10
	DDRD &= ~(1 << DDD0); // RX como entrada
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	8a b9       	out	0x0a, r24	; 10
	
	UCSR0A = 0;
  b2:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B = (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0); // Habilitar RX, TX e interrupción RX
  b6:	88 e9       	ldi	r24, 0x98	; 152
  b8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8 bits de datos, sin paridad, 1 bit de stop
  bc:	86 e0       	ldi	r24, 0x06	; 6
  be:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	UBRR0 = 103; // 9600 baudios @16MHz
  c2:	87 e6       	ldi	r24, 0x67	; 103
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  ca:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  ce:	08 95       	ret

000000d0 <setup>:
}
//**************************************
//Subrutinas 
//******************************************
void setup() {
	cli(); // Deshabilitar interrupciones
  d0:	f8 94       	cli
	
	// Configurar LEDs como salidas
	DDRB |= (1 << PORTB1) | (1 << PORTB0);
  d2:	84 b1       	in	r24, 0x04	; 4
  d4:	83 60       	ori	r24, 0x03	; 3
  d6:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~((1 << PORTB1) | (1 << PORTB0)); // Apagar ambos LEDs
  d8:	85 b1       	in	r24, 0x05	; 5
  da:	8c 7f       	andi	r24, 0xFC	; 252
  dc:	85 b9       	out	0x05, r24	; 5
	
	// Configurar botón como entrada con pull-up
	DDRC &= ~(1 << PORTC0);
  de:	87 b1       	in	r24, 0x07	; 7
  e0:	8e 7f       	andi	r24, 0xFE	; 254
  e2:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1 << PORTC0);
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	88 b9       	out	0x08, r24	; 8
	
	initUART(); // Inicializar comunicación UART
  ea:	0e 94 53 00 	call	0xa6	; 0xa6 <initUART>
	
	sei(); // Habilitar interrupciones
  ee:	78 94       	sei
  f0:	08 95       	ret

000000f2 <writeChar>:
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00); // 8 bits de datos, sin paridad, 1 bit de stop
	UBRR0 = 103; // 9600 baudios @16MHz
}

void writeChar(char caracter) {
	while (!(UCSR0A & (1 << UDRE0))); // Esperar hasta que el buffer esté vacío
  f2:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  f6:	95 ff       	sbrs	r25, 5
  f8:	fc cf       	rjmp	.-8      	; 0xf2 <writeChar>
	UDR0 = caracter;
  fa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  fe:	08 95       	ret

00000100 <writeString>:
}

void writeString(char* texto) {
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	8c 01       	movw	r16, r24
	for (uint8_t i = 0; texto[i] != '\0'; i++) {
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	03 c0       	rjmp	.+6      	; 0x112 <writeString+0x12>
		writeChar(texto[i]);
 10c:	0e 94 79 00 	call	0xf2	; 0xf2 <writeChar>
	while (!(UCSR0A & (1 << UDRE0))); // Esperar hasta que el buffer esté vacío
	UDR0 = caracter;
}

void writeString(char* texto) {
	for (uint8_t i = 0; texto[i] != '\0'; i++) {
 110:	cf 5f       	subi	r28, 0xFF	; 255
 112:	f8 01       	movw	r30, r16
 114:	ec 0f       	add	r30, r28
 116:	f1 1d       	adc	r31, r1
 118:	80 81       	ld	r24, Z
 11a:	81 11       	cpse	r24, r1
 11c:	f7 cf       	rjmp	.-18     	; 0x10c <writeString+0xc>
		writeChar(texto[i]);
	}
}
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	08 95       	ret

00000126 <main>:
//**************************************
//MAIN FUNCTION
//******************************************

int main(void) {
	setup();
 126:	0e 94 68 00 	call	0xd0	; 0xd0 <setup>
	writeString("\nSistema listo\n");
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 80 00 	call	0x100	; 0x100 <writeString>
	writeString("Envie '1' para encender LED1 o '0' para apagarlo\n");
 132:	80 e1       	ldi	r24, 0x10	; 16
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 80 00 	call	0x100	; 0x100 <writeString>
	
	while (1) {
		// Control del LED1 por UART
		if (new_data) {
 13a:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <__data_end>
 13e:	88 23       	and	r24, r24
 140:	c9 f0       	breq	.+50     	; 0x174 <main+0x4e>
			new_data = 0;
 142:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <__data_end>
			
			if (received_char == '1') {
 146:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <received_char>
 14a:	81 33       	cpi	r24, 0x31	; 49
 14c:	41 f4       	brne	.+16     	; 0x15e <main+0x38>
				PORTB |= (1 << PORTB0); // Encender LED1
 14e:	85 b1       	in	r24, 0x05	; 5
 150:	81 60       	ori	r24, 0x01	; 1
 152:	85 b9       	out	0x05, r24	; 5
				writeString("LED1 encendido\n");
 154:	82 e4       	ldi	r24, 0x42	; 66
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	0e 94 80 00 	call	0x100	; 0x100 <writeString>
 15c:	0b c0       	rjmp	.+22     	; 0x174 <main+0x4e>
			}
			else if (received_char == '0') {
 15e:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <received_char>
 162:	80 33       	cpi	r24, 0x30	; 48
 164:	39 f4       	brne	.+14     	; 0x174 <main+0x4e>
				PORTB &= ~(1 << PORTB0); // Apagar LED1
 166:	85 b1       	in	r24, 0x05	; 5
 168:	8e 7f       	andi	r24, 0xFE	; 254
 16a:	85 b9       	out	0x05, r24	; 5
				writeString("LED1 apagado\n");
 16c:	82 e5       	ldi	r24, 0x52	; 82
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 80 00 	call	0x100	; 0x100 <writeString>
			}
		}
		
		// Control del LED2 por botón (con anti-rebote)
		if (!(PINC & (1 << PORTC0))) { // Si botón presionado (asumiendo pull-up)
 174:	30 99       	sbic	0x06, 0	; 6
 176:	e1 cf       	rjmp	.-62     	; 0x13a <main+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	2f ef       	ldi	r18, 0xFF	; 255
 17a:	80 e7       	ldi	r24, 0x70	; 112
 17c:	92 e0       	ldi	r25, 0x02	; 2
 17e:	21 50       	subi	r18, 0x01	; 1
 180:	80 40       	sbci	r24, 0x00	; 0
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	e1 f7       	brne	.-8      	; 0x17e <main+0x58>
 186:	00 c0       	rjmp	.+0      	; 0x188 <main+0x62>
 188:	00 00       	nop
			_delay_ms(50); // Anti-rebote
			if (!(PINC& (1 << PORTC0))) { // Verificar aún presionado
 18a:	30 99       	sbic	0x06, 0	; 6
 18c:	d6 cf       	rjmp	.-84     	; 0x13a <main+0x14>
				PORTB ^= (1 << PORTB1); // Cambiar estado LED2
 18e:	95 b1       	in	r25, 0x05	; 5
 190:	82 e0       	ldi	r24, 0x02	; 2
 192:	89 27       	eor	r24, r25
 194:	85 b9       	out	0x05, r24	; 5
				writeString("LED2 cambiado\n");
 196:	80 e6       	ldi	r24, 0x60	; 96
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	0e 94 80 00 	call	0x100	; 0x100 <writeString>
				while (!(PIND & (1 << PORTC0))); // Esperar a soltar botón
 19e:	48 9b       	sbis	0x09, 0	; 9
 1a0:	fe cf       	rjmp	.-4      	; 0x19e <main+0x78>
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	80 e7       	ldi	r24, 0x70	; 112
 1a6:	92 e0       	ldi	r25, 0x02	; 2
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <main+0x82>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <main+0x8c>
 1b2:	00 00       	nop
 1b4:	c2 cf       	rjmp	.-124    	; 0x13a <main+0x14>

000001b6 <__vector_18>:
	}
}
//**************************************
//Interrupciones 
//******************************************
ISR(USART_RX_vect) {
 1b6:	1f 92       	push	r1
 1b8:	0f 92       	push	r0
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	0f 92       	push	r0
 1be:	11 24       	eor	r1, r1
 1c0:	8f 93       	push	r24
	received_char = UDR0;
 1c2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1c6:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <received_char>
	new_data = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <__data_end>
 1d0:	8f 91       	pop	r24
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
